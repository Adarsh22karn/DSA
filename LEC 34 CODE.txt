Question No: 1
reportIcon
Single File Programming Question
Problem Statement



Uma wants to calculate the depth of a node in the given Binary Search Tree. The depth of a node is defined as the number of edges present in the path from the root node of a tree to that node.



Help her implement a program to calculate the depth of a node in the given BST.

Input format :
The first line consists of an integer, n, denoting the number of nodes in the BST.

The second line consists of n space-separated integers, representing the elements to be inserted into the BST.

The third line consists of an integer k representing the node for which depth needs to be calculated.

Output format :
The output prints the depth of the given node.

Code constraints :
The test cases will fall under the following constraints:

1 ≤ n ≤ 15

1 ≤ Elements ≤ 300

Sample test cases :
Input 1 :
3
8 6 10
6
Output 1 :
1
Input 2 :
6
20 10 30 5 15 25
5
Output 2 :
2.



























#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(NULL), right(NULL) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == NULL) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to find the depth of a node in the BST
int findDepth(Node* root, int value, int depth) {
    if (root == NULL) {
        return -1; // Node not found
    }
    if (root->data == value) {
        return depth;
    }
    if (value < root->data) {
        return findDepth(root->left, value, depth + 1);
    } else {
        return findDepth(root->right, value, depth + 1);
    }
}

int main() {
    int n;
    cin >> n;

    Node* root = NULL;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    int k;
    cin >> k;

    int depth = findDepth(root, k, 0);

    if (depth == -1) {
        cout << "Node not found" << endl;
    } else {
        cout << depth << endl;
    }

    return 0;
}

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Question No: 2
reportIcon
Single File Programming Question
Problem Statement:



Radhi is a software developer who has recently learned about binary search trees and their various operations. She wants to test her knowledge by implementing a program to calculate the sum of all unique elements in a binary search tree.



She wants to write a program to implement a binary search tree (BST) and calculate the sum of unique elements in it.

Input format :
The input consists of a series of integers, followed by -1 to indicate the end of the input.

Each integer represents a value to be inserted into the BST.

Output format :
The output displays the sum of all values in the binary search tree.



Refer to the sample output for the formatting specifications

Code constraints :
The test cases will fall under the following constraints:



1 <= n <= 105

Sample test cases :
Input 1 :
5 10 15 20 25 -1
Output 1 :
75
Input 2 :
3 65 90 4 5 2 5 7 -1
Output 2 :
181
Input 3 :
100 62 245 54 9 25 11 -1
Output 3 :
506


























#include <iostream>
#include <unordered_set>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to calculate the sum of unique elements in the BST
int calculateSumOfUniqueElements(Node* root, unordered_set<int>& uniqueElements) {
    if (root == nullptr) {
        return 0;
    }

    uniqueElements.insert(root->data);
    int leftSum = calculateSumOfUniqueElements(root->left, uniqueElements);
    int rightSum = calculateSumOfUniqueElements(root->right, uniqueElements);

    return leftSum + rightSum + root->data;
}

int main() {
    Node* root = nullptr;
    unordered_set<int> uniqueElements;

    int value;
    while (cin >> value) {
        if (value == -1) {
            break;
        }
        root = insert(root, value);
    }

    int sum = calculateSumOfUniqueElements(root, uniqueElements);
    cout << sum << endl;

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Question No: 3
reportIcon
Single File Programming Question
Problem Statement



You are tasked with writing a program to work with binary search trees (BST). In this program, you will create, modify, and display a BST.



Your task is to implement a program that performs the following operations:

Create a binary search tree (BST) by inserting a series of integer values.
Find and delete the node with the maximum value in the BST.
Display the BST after the deletion operation using an in-order traversal.


The provided code gives you a starting point with the structure and essential functions for handling the BST. Your task is to complete the missing parts and implement the specified functionality.

Input format :
The first line input consists of an integer N, representing the number of nodes to be inserted into the binary search tree (BST).

The second line consists of N integers, separated by spaces, representing the values to be inserted into the BST.

Output format :
The first line of output prints the value of the node with the maximum value that will be deleted.

The second line consists of the values of the nodes in the BST after the maximum value node has been deleted using an in-order traversal.



Refer to the sample output for the exact text.

Code constraints :
1 ≤ N ≤ 25

Sample test cases :
Input 1 :
3
50 30 70
Output 1 :
Node with the maximum value to be deleted: 70
BST after deleting the maximum value node: 30 50 
Input 2 :
6
45 98 67 84 35 17
Output 2 :
Node with the maximum value to be deleted: 98
BST after deleting the maximum value node: 17 35 45 67 84 
























#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else if (value > root->data) {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to find and delete the node with the maximum value in the BST
Node* deleteMax(Node* root, int& maxValue) {
    if (root == nullptr) {
        return nullptr;
    }
    if (root->right == nullptr) {
        maxValue = root->data;
        return root->left;
    }
    root->right = deleteMax(root->right, maxValue);
    return root;
}

// Function to perform in-order traversal of the BST and print the values
void inOrderTraversal(Node* root) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left);
    cout << root->data << " ";
    inOrderTraversal(root->right);
}

int main() {
    int N;
    cin >> N;

    Node* root = nullptr;

    for (int i = 0; i < N; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    int maxValue = 0;
    root = deleteMax(root, maxValue);

    cout << "Node with the maximum value to be deleted: " << maxValue << endl;
    cout << "BST after deleting the maximum value node: ";
    inOrderTraversal(root);
    cout << endl;

    return 0;
}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Question No: 4
reportIcon
Single File Programming Question
Problem Statement



Sophie, a computer science student, is learning about Binary Search Trees (BSTs) and wants to create a program to practice working with BSTs.



She needs a program that allows her to insert a node with a specific value into a BST and find the number of nodes in the tree that have the same value as a given reference value.

Input format :
The first line of input consists of the number of nodes in the BST, N.

The second line of input consists of N space-separated integers representing the values of the BST nodes in the order they were inserted.

The third line of input consists of an integer, K, representing the specific value to insert into the BST.

The fourth line of input consists of an integer, X, representing the reference value for which Sophie wants to find the number of matching nodes.

Output format :
The first line of output displays the values of the BST in ascending order after inserting the specific value (K).
The second line of output displays the count of nodes in the BST that have the same value as the reference value (X).


Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases will fall under the following constraints:

1 ≤ n ≤ 10

1 ≤ value of nodes ≤ 1000

1 ≤ K ≤ 1000

1 ≤ X ≤ 1000

Sample test cases :
Input 1 :
5
10 5 20 3 8
15
5
Output 1 :
3 5 8 10 15 20 
1
Input 2 :
7
50 30 70 20 40 60 80
40
40
Output 2 :
20 30 40 40 50 60 70 80 
2
Input 3 :
3
10 15 5
5
5
Output 3 :
5 5 10 15 
2




























#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to perform in-order traversal and count nodes with a specific value
int countNodesWithReferenceValue(Node* root, int referenceValue) {
    if (root == nullptr) {
        return 0;
    }

    int count = 0;
    if (root->data == referenceValue) {
        count++;
    }

    count += countNodesWithReferenceValue(root->left, referenceValue);
    count += countNodesWithReferenceValue(root->right, referenceValue);

    return count;
}

// Function to perform in-order traversal and print values in ascending order
void inOrderTraversal(Node* root) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left);
    cout << root->data << " ";
    inOrderTraversal(root->right);
}

int main() {
    int N;
    cin >> N;

    Node* root = nullptr;

    for (int i = 0; i < N; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    int K, X;
    cin >> K >> X;

    root = insert(root, K);
    inOrderTraversal(root);
    cout << endl;

    int count = countNodesWithReferenceValue(root, X);
    cout << count << endl;

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


Question No: 5
reportIcon
Single File Programming Question
Problem Statement:



Geetha is exploring the world of binary search trees (BSTs) and wants to create a program to find the sum of all nodes in a BST that are greater than a given target value.



She has implemented a program to accomplish this and needs a problem statement for her task.

Input format :
The first line of input consists of an integer, n, representing the number of nodes in the BST.

The second line of input consists of an integer, denoting the values to be inserted into the BST.

The last line of input consists of a single integer, target, which is the target value.

Output format :
The output displays a single integer, which is the sum of all nodes in the BST with values greater than the target value.



Refer to the sample output for the formatting specifications.

Code constraints :
The test cases will fall under the following constraints:



1 <= n <= 10

1 <= target <= 100

Sample test cases :
Input 1 :
7
10 20 40 4 60 70 3
60
Output 1 :
70
Input 2 :
5
10 3 10 50 60
4
Output 2 :
120




























#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to calculate the sum of nodes greater than the target value
int calculateSumOfNodesGreaterThanTarget(Node* root, int target) {
    if (root == nullptr) {
        return 0;
    }
    
    int sum = 0;
    if (root->data > target) {
        sum += root->data;
    }
    
    sum += calculateSumOfNodesGreaterThanTarget(root->left, target);
    sum += calculateSumOfNodesGreaterThanTarget(root->right, target);
    
    return sum;
}

int main() {
    int n;
    cin >> n;

    Node* root = nullptr;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    int target;
    cin >> target;

    int sum = calculateSumOfNodesGreaterThanTarget(root, target);
    cout << sum << endl;

    return 0;
}
/*#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to find the sum of nodes greater than the target value
int findSumGreaterThanTarget(Node* root, int target) {
    if (root == nullptr) {
        return 0;
    }
    
    int sum = 0;
    if (root->data > target) {
        sum += root->data;
    }
    
    sum += findSumGreaterThanTarget(root->left, target);
    sum += findSumGreaterThanTarget(root->right, target);

    return sum;
}

int main() {
    int n;
    cin >> n;

    Node* root = nullptr;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    int target;
    cin >> target;

    int sum = findSumGreaterThanTarget(root, target);
    cout << sum << endl;

    return 0;
}*/

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Question No: 6
reportIcon
Single File Programming Question
Problem statement



Alex, a computer science student, is working on a project related to binary search trees (BSTs) and needs to implement a program that deletes the root node of a BST.



He wants to create a program to delete the root node of a given BST and display the in-order traversals.



Help him to solve this problem.

Input format :
The first line of input consists of an integer, N, representing the number of nodes in the BST.

The second line of input consists of N space-separated integers that represent the values of the BST nodes in the order they were inserted.

Output format :
If the root node is successfully deleted, the output will display the updated values of the BST in ascending order (in order).

If the root node cannot be deleted (i.e., it's the only node in the tree), the program should display "Cannot Delete Root."



Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases will fall under the following constraints:



The input values are unique integers.
1 <= n <= 20
1 <= value of node <= 1000
Sample test cases :
Input 1 :
3
10 25 35
Output 1 :
25 35 
Input 2 :
5
10 6 15 3 20
Output 2 :
3 6 15 20 
Input 3 :
8
15 10 20 5 12 18 25 4
Output 3 :
4 5 10 12 18 20 25 
Input 4 :
1
5
Output 4 :
Cannot Delete Root































#include <iostream>
#include <vector>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to perform in-order traversal and store values in a vector
void inOrderTraversal(Node* root, vector<int>& result) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left, result);
    result.push_back(root->data);
    inOrderTraversal(root->right, result);
}

int main() {
    int N;
    cin >> N;

    Node* root = nullptr;

    for (int i = 0; i < N; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    if (root->left == nullptr && root->right == nullptr) {
        cout << "Cannot Delete Root" << endl;
    } else {
        // Store the left and right subtrees
        Node* leftSubtree = root->left;
        Node* rightSubtree = root->right;

        delete root;

        // Perform in-order traversal on the left and right subtrees
        vector<int> result;
        inOrderTraversal(leftSubtree, result);
        inOrderTraversal(rightSubtree, result);

        for (int value : result) {
            cout << value << " ";
        }
        cout << endl;
    }

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Question No: 7
reportIcon
Single File Programming Question
Problem Statement



John, a computer science student, is studying Binary Search Trees (BSTs) as part of his coursework. He is fascinated by these data structures and wants to create a program that enables users to construct a Binary Search Tree and subsequently remove all the leaf nodes from the tree.



Help John develop this program to practice his newfound knowledge.

Input format :
The first line of input consists of an integer, N, representing the number of nodes to insert into the BST.

The second line contains N space-separated integers representing the values of the BST nodes to be inserted.

Output format :
The output displays the values of the BST in ascending order after removing all the leaf nodes.

If the tree is empty, print "Empty tree."



Refer to the sample output for the formatting specifications.

Code constraints :
The given test cases will fall under the following constraint:



1 <= N <= 10

The input values are unique positive integers.

Sample test cases :
Input 1 :
4
5 3 7 2
Output 1 :
3 5 
Input 2 :
5
3 1 6 2 7
Output 2 :
1 3 6 
Input 3 :
3
5 2 7
Output 3 :
5 
Input 4 :
0
Output 4 :
Empty tree






























#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to remove leaf nodes from the BST
Node* removeLeaves(Node* root) {
    if (root == nullptr) {
        return nullptr;
    }
    
    if (root->left == nullptr && root->right == nullptr) {
        delete root;
        return nullptr;
    }

    root->left = removeLeaves(root->left);
    root->right = removeLeaves(root->right);

    return root;
}

// Function to perform an in-order traversal and print values in ascending order
void inOrderTraversal(Node* root) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left);
    cout << root->data << " ";
    inOrderTraversal(root->right);
}

int main() {
    int N;
    cin >> N;

    Node* root = nullptr;

    for (int i = 0; i < N; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    root = removeLeaves(root);

    if (root == nullptr) {
        cout << "Empty tree" << endl;
    } else {
        inOrderTraversal(root);
        cout << endl;
    }

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Question No: 8
reportIcon
Single File Programming Question
Problem Statement



Write a program to create a binary search tree (BST) from user input integers. After constructing the BST, use a preorder traversal approach to print only the values found at odd depths within the tree. 



In summary, create a BST, input integers as specified, and print values at odd depths.

Input format :
The first line of input consists of an integer N, representing the size of the array.

The second line consists of N space-separated integer values.

Output format :
The output displays N space-separated integer values printed only at the odd depths.

Code constraints :
1 ≤ N ≤ 20

Sample test cases :
Input 1 :
4
3 1 2 5
Output 1 :
3 2 
Input 2 :
7
4 2 6 1 3 5 7
Output 2 :
4 1 3 5 7 
Input 3 :
20
12 11 14 9 3 6 7 4 13 16 18 20 34 45 66 67 21 93 22 54
Output 3 :
12 9 6 13 16 20 21 45 54 67 






























#include <iostream>
using namespace std;

// Structure to represent a node in the BST
struct Node {
    int data;
    Node* left;
    Node* right;
    Node(int value) : data(value), left(nullptr), right(nullptr) {}
};

// Function to insert a node into the BST
Node* insert(Node* root, int value) {
    if (root == nullptr) {
        return new Node(value);
    }
    if (value < root->data) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// Function to print values at odd depths using a preorder traversal
void printValuesAtOddDepths(Node* root, int depth, bool oddDepth) {
    if (root == nullptr) {
        return;
    }

    if (oddDepth) {
        cout << root->data << " ";
    }

    printValuesAtOddDepths(root->left, depth + 1, !oddDepth);
    printValuesAtOddDepths(root->right, depth + 1, !oddDepth);
}

int main() {
    int N;
    cin >> N;

    Node* root = nullptr;

    for (int i = 0; i < N; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    printValuesAtOddDepths(root, 1, true);
    cout << endl;

    return 0;
}

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000





