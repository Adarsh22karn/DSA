 Single File Programming Question

Problem Statement


You are working on a critical customer database system for a large e-commerce platform. 


The database stores customer information, like their unique customer IDs, in a binary tree structure. Ensuring data integrity is paramount, as duplicate customer IDs can lead to serious data inconsistencies and operational issues. 


Your task is to develop a program that checks whether the binary tree containing customer IDs has any duplicate values. Detecting duplicates is essential to maintain the accuracy of customer records.
Input format :

The first line of input consists of an integer representing the value of the root node.

For each node in the tree, there are two integers,

Left child data: an integer representing the value of the left child node. Use -1 to indicate no left child.

Right child data: an integer representing the value of the right child node. Use -1 to indicate no right child.
Output format :

Print "Yes" if there are any duplicate customer IDs in the binary tree.

Otherwise, print "No".
Code constraints :

1 <= Number of nodes in the binary tree <= 100

1 <= Customer ID (node value) <= 100
Sample test cases :
Input 1 :

1
1
-1
-1
-1
-1

Output 1 :

Yes

Input 2 :

5
3
7
2
8
-1
-1
-1
-1
-1
-1

Output 2 :

No
























#include <iostream>
#include <unordered_set>

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int value) : val(value), left(nullptr), right(nullptr) {}
};

bool hasDuplicate(TreeNode* root) {
    if (root == nullptr) {
        return false;
    }

    std::unordered_set<int> seen;
    std::unordered_set<TreeNode*> stack;
    stack.insert(root);

    while (!stack.empty()) {
        TreeNode* node = *stack.begin();
        stack.erase(node);

        if (seen.find(node->val) != seen.end()) {
            return true;
        }

        seen.insert(node->val);

        if (node->left) {
            stack.insert(node->left);
        }

        if (node->right) {
            stack.insert(node->right);
        }
    }

    return false;
}

TreeNode* buildTree() {
    int rootValue;
    std::cin >> rootValue;
    TreeNode* root = new TreeNode(rootValue);
    std::unordered_set<TreeNode*> stack;
    stack.insert(root);

    while (!stack.empty()) {
        TreeNode* node = *stack.begin();
        stack.erase(node);

        int leftValue, rightValue;
        std::cin >> leftValue >> rightValue;

        if (leftValue != -1) {
            node->left = new TreeNode(leftValue);
            stack.insert(node->left);
        }

        if (rightValue != -1) {
            node->right = new TreeNode(rightValue);
            stack.insert(node->right);
        }
    }

    return root;
}

int main() {
    TreeNode* root = buildTree();
    if (hasDuplicate(root)) {
        std::cout << "Yes" << std::endl;
    } else {
        std::cout << "No" << std::endl;
    }

    // Don't forget to free the allocated memory for the tree nodes
    // (You may implement a separate function to deallocate the tree nodes).
    return 0;
}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

 Single File Programming Question

Problem Statement


You are given an unordered binary tree, and your task is to determine the minimum number of swaps required to convert it into a binary search tree (BST). 


A binary search tree is a binary tree in which, for each node:

    All nodes in its left subtree have values less than the node's value.
    All nodes in its right subtree have values greater than the node's value.


Your task is to find the minimum number of swaps of the nodes in the given binary tree to transform it into a valid BST.
Input format :

The first line of input consists of an integer N, representing the number of nodes in the binary tree.

The second line consists of the values of the N nodes separated by space, representing the unordered binary tree.

The input is terminated by entering -1.
Output format :

The output prints an integer representing the minimum number of swaps required to convert the given binary tree into a binary search tree (BST).
Code constraints :

1 < N <= 100
Sample test cases :
Input 1 :

7
5 6 7 8 9 10 11 -1

Output 1 :

3

Input 2 :

7
50 60 70 80 90 100 110 -1

Output 2 :

3

Input 3 :

4
3 1 4 2 -1

Output 3 :

3






















#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};

// In-order traversal to get the elements in sorted order
void inOrderTraversal(TreeNode* root, vector<int>& sorted) {
    if (root) {
        inOrderTraversal(root->left, sorted);
        sorted.push_back(root->val);
        inOrderTraversal(root->right, sorted);
    }
}

// Calculate the minimum number of swaps needed to sort an array
int minSwapsToSort(vector<int>& arr) {
    int n = arr.size();
    vector<pair<int, int>> indexedArr(n);
    for (int i = 0; i < n; i++) {
        indexedArr[i] = {arr[i], i};
    }

    sort(indexedArr.begin(), indexedArr.end());

    int swaps = 0;
    vector<bool> visited(n, false);

    for (int i = 0; i < n; i++) {
        if (visited[i] || indexedArr[i].second == i)
            continue;

        int cycle_size = 0;
        int j = i;

        while (!visited[j]) {
            visited[j] = true;
            j = indexedArr[j].second;
            cycle_size++;
        }

        if (cycle_size > 0) {
            swaps += (cycle_size - 1);
        }
    }

    return swaps;
}

// Build a binary tree from the given array
TreeNode* buildTree(vector<int>& arr, int& index) {
    if (index >= arr.size() || arr[index] == -1)
        return nullptr;

    TreeNode* root = new TreeNode(arr[index]);
    root->left = buildTree(arr, ++index);
    root->right = buildTree(arr, ++index);

    return root;
}

int main() {
    int N;
    cin >> N;
    vector<int> values(N);

    for (int i = 0; i < N; i++) {
        cin >> values[i];
    }

    int index = 0;
    TreeNode* root = buildTree(values, index);

    vector<int> sorted;
    inOrderTraversal(root, sorted);

    int swaps = minSwapsToSort(sorted);

    cout << swaps << endl;

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


Your task is to create a program that can determine whether a given array of integers represents a sorted sequence in non-decreasing order. 


Specifically, you need to ascertain if this array could be a valid in-order traversal of a Binary Search Tree (BST).
Input format :

The first line of input consists of an integer N, representing the number of elements in the array.

The second line consists of N space-separated integers, representing the elements of the array.
Output format :

Print "Yes" if the array represents an inorder traversal of a BST.

Else, print "No".
Code constraints :

N > 0
Sample test cases :
Input 1 :

5
19 23 25 30 45

Output 1 :

Yes

Input 2 :

5
19 23 30 25 45

Output 2 :

No




















#include <iostream>
#include <vector>

using namespace std;

bool isValidInOrderTraversal(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        if (arr[i] < arr[i - 1]) {
            return false;
        }
    }
    return true;
}

int main() {
    int N;
    cin >> N;
    vector<int> elements(N);

    for (int i = 0; i < N; i++) {
        cin >> elements[i];
    }

    if (isValidInOrderTraversal(elements)) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


You are developing software for a car rental agency that manages its vehicle fleet across two locations, City A and City B. Each location's vehicle fleet is represented as a Binary Search Tree (BST) containing unique vehicle IDs. 


Your program needs to determine whether the vehicle fleets in both cities are identical or not.
Input format :

The first line of input consists of the space-separated vehicle IDs for City A, terminated by -1.

The second line consists of the space-separated vehicle IDs for City B, terminated by -1.
Output format :

Print "Both vehicle fleets are identical" if the vehicle fleets in both cities are identical.

Otherwise, print "Vehicle fleets are not identical"
Sample test cases :
Input 1 :

10 5 15 -1
10 5 15 -1

Output 1 :

Both vehicle fleets are identical

Input 2 :

30 25 15-1
25 30 -1

Output 2 :

Vehicle fleets are not identical

























#include <iostream>
#include <vector>
#include <sstream>

using namespace std;

// Definition of a TreeNode
struct TreeNode {
    int val;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int v) : val(v), left(nullptr), right(nullptr) {}
};

// Function to insert a new value into the BST
TreeNode* insert(TreeNode* root, int val) {
    if (root == nullptr) {
        return new TreeNode(val);
    }
    if (val < root->val) {
        root->left = insert(root->left, val);
    } else {
        root->right = insert(root->right, val);
    }
    return root;
}

// Function to perform in-order traversal and store the elements in a vector
void inOrderTraversal(TreeNode* root, vector<int>& elements) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left, elements);
    elements.push_back(root->val);
    inOrderTraversal(root->right, elements);
}

// Function to check if two vectors are identical
bool areVectorsIdentical(const vector<int>& a, const vector<int>& b) {
    if (a.size() != b.size()) {
        return false;
    }
    for (int i = 0; i < a.size(); i++) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}

int main() {
    string inputA, inputB;
    getline(cin, inputA); // Read input for City A
    getline(cin, inputB); // Read input for City B

    // Parse the input strings into integer vectors
    vector<int> vehicleIDsA, vehicleIDsB;
    stringstream streamA(inputA), streamB(inputB);
    int id;

    while (streamA >> id) {
        if (id != -1) {
            vehicleIDsA.push_back(id);
        }
    }

    while (streamB >> id) {
        if (id != -1) {
            vehicleIDsB.push_back(id);
        }
    }

    // Create BSTs for both cities and perform in-order traversal
    TreeNode* rootA = nullptr;
    TreeNode* rootB = nullptr;

    for (int id : vehicleIDsA) {
        rootA = insert(rootA, id);
    }

    for (int id : vehicleIDsB) {
        rootB = insert(rootB, id);
    }

    vector<int> inOrderElementsA, inOrderElementsB;
    inOrderTraversal(rootA, inOrderElementsA);
    inOrderTraversal(rootB, inOrderElementsB);

    // Check if the vehicle fleets are identical
    if (areVectorsIdentical(inOrderElementsA, inOrderElementsB)) {
        cout << "Both vehicle fleets are identical" << endl;
    } else {
        cout << "Vehicle fleets are not identical" << endl;
    }

    return 0;
}
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000