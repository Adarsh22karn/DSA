Question No: 1
reportIcon
Single File Programming Question
Problem Statement



Preethi is working on a project related to network optimization. She needs a program that can calculate the maximum flow between two nodes in a given network. 



Preethi decided to use the Floyd-Warshall algorithm to achieve this.



Write a program that calculates the maximum flow between two specified nodes in a network. The network is represented by a directed graph, and the program will determine the maximum flow from a source node to a sink node.

Input format :
The first line of input contains an integer, n, representing the number of nodes in the network, and m, representing the number of directed edges in the network.

The next m lines contain three integers each: u, v, and w, representing a directed edge from node u to node v with a capacity of w units.

The last line of input consists of two integers, source and sink, representing the source node and the sink node, respectively.

Output format :
If the sink node is unreachable from the source node, the output should display "Nodes are unreachable. Maximum flow is 0."

Otherwise, the output should display "Maximum flow from node [source] to [sink] is: [maximum_flow]."

Code constraints :
The test cases will fall under the following constraints:

2 ≤ n ≤ 100 (number of nodes in the network)

1 ≤ u, v ≤ n (nodes represented by integers)

0 ≤ m ≤ n*(n-1) (number of edges)

0 ≤ w ≤ 1e9 (edge capacity)

Sample test cases :
Input 1 :
3 3
0 1 1
1 2 2
0 2 5
2 1
Output 1 :
Nodes are unreachable. Maximum flow is 0.
Input 2 :
4 5
0 1 2
1 2 3
2 3 4
0 2 5
1 3 6
0 3
Output 2 :
Maximum flow from node 0 to 3 is: 8
Input 3 :
3 2
0 1 2
1 2 3
0 1
Output 3 :
Maximum flow from node 0 to 1 is: 2

























#include <iostream>
#include <climits>

using namespace std;

#define INF 1000000000
#define MAXN 100

int main() {
    int n, m;
    cin >> n;
    cin >> m;

    int graph[MAXN][MAXN];
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i == j) {
                graph[i][j] = 0;
            } else {
                graph[i][j] = INF;
            }
        }
    }

    for (int i = 0; i < m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        graph[u][v] = w;
    }

    int source, sink;
    cin >> source;
    cin >> sink;

    // Floyd-Warshall algorithm
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][k] != INF && graph[k][j] != INF) {
                    if (graph[i][j] > graph[i][k] + graph[k][j]) {
                        graph[i][j] = graph[i][k] + graph[k][j];
                    }
                }
            }
        }
    }

    if (graph[source][sink] == INF) {
        cout << "Nodes are unreachable. Maximum flow is 0." << endl;
    } else {
        int shortest_distance = graph[source][sink];
        cout << "Maximum flow from node " << source << " to " << sink << " is: " << shortest_distance << endl;
    }

    return 0;
}




00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Question No: 2
reportIcon
Single File Programming Question
Problem Statement



Latha is studying graph theory and is currently learning about detecting negative cycles in a weighted directed graph. She is interested in implementing the Floyd-Warshall algorithm to determine if a given graph contains any negative cycles.



Write a program to help Latha determine whether the given weighted directed graph contains any negative cycles.

Input format :
The first line of input consists of two space-separated integers, V and E. V represents the number of vertices, and E represents the number of edges in the graph.

The next lines each contain three space-separated integers, u, v, and w, representing a directed edge from vertex u to vertex v with weight w.

Output format :
If there is a negative cycle in the graph, print "Yes"

Otherwise, print "No"

Code constraints :
The test cases will fall under the following constraints:

1 ≤ V ≤ 4

0 ≤ E ≤ V*(V-1)/2

0 ≤ u, v < V

-100 ≤ w ≤ 100

Sample test cases :
Input 1 :
4 3
0 1 1
1 2 -1
2 3 -1
Output 1 :
Yes
Input 2 :
4 7
0 1 1
1 2 1
2 3 1
3 1 1
3 0 1
1 0 -3
3 1 -1
Output 2 :
No




























#include <iostream>
using namespace std;

#define V 4
#define INF 99999

void printSolution(int dist[][V]);

bool negCyclefloydWarshall(int graph[][V])
{
    int dist[V][V], i, j, k;

    for (i = 0; i < V; i++)
        for (j = 0; j < V; j++)
            dist[i][j] = graph[i][j];

    for (k = 0; k < V; k++)
    {
        for (i = 0; i < V; i++)
        {
            for (j = 0; j < V; j++)
            {
                if (dist[i][k] + dist[k][j] < dist[i][j])
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }
    }

    for (int i = 0; i < V; i++)
        if (dist[i][i] < 0)
            return true;
    return false;
}

int main()
{
    int graph[V][V];

    for (int i = 0; i < V; i++)
    {
        for (int j = 0; j < V; j++)
        {
            cin >> graph[i][j];
        }
    }

    if (negCyclefloydWarshall(graph))
        cout << "Yes";
    else
        cout << "No";

    return 0;
}

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Question No: 3
reportIcon
Single File Programming Question
Problem Statement



Varsha is working on optimizing the transportation network in a city, and she needs a program to help her find the shortest path between two locations efficiently. 



She decided to implement the Floyd-Warshall algorithm to compute the shortest paths between all pairs of locations in the city.



Write a program that takes a weighted directed graph as input, applies the Floyd-Warshall algorithm to compute the shortest paths between all pairs of locations, and then finds and prints the shortest path from a specified source location to a destination location.

Input format :
The first line of input consists of a single integer, V, which is the number of vertices in the graph.

The next V lines, each containing V integers, represent the adjacency matrix of the weighted directed graph. The value of graph [i][j] represents the weight of the edge from vertex i to vertex j.

The last line of input consists of an integer, destination, representing the target vertex.

Output format :
The output displays the shortest path from the source vertex to the destination vertex in the following format: "Shortest path from source to destination S: P1 -> P2 -> P3 ->... -> PN".

where S is the destination index, and P1, P2, P3, ... PN represent the nodes in the path from source to destination.

Code constraints :
1 ≤ V ≤ 100

0 ≤ graph[i][j] ≤ 107

0 ≤ destination < V

Sample test cases :
Input 1 :
3
0 1 2
1 0 3
2 3 0
2
Output 1 :
Shortest path from Source to destination 2: 0 -> 2
Input 2 :
4
0 5 10000000 10
10000000 0 3 10000000
10000000 10000000 0 1
10000000 10000000 10000000 0
3
Output 2 :
Shortest path from Source to destination 3: 0 -> 1 -> 2 -> 3




























#include <iostream>
using namespace std;

#define INF 1e7
#define MAXN 100

int dis[MAXN][MAXN];
int Next[MAXN][MAXN];

void initialise(int V, int graph[MAXN][MAXN]) {
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            dis[i][j] = graph[i][j];
            if (graph[i][j] == INF)
                Next[i][j] = -1;
            else
                Next[i][j] = j;
        }
    }
}

void floydWarshall(int V) {
    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (dis[i][k] == INF || dis[k][j] == INF)
                    continue;

                if (dis[i][j] > dis[i][k] + dis[k][j]) {
                    dis[i][j] = dis[i][k] + dis[k][j];
                    Next[i][j] = Next[i][k];
                }
            }
        }
    }
}

void printPath(int path[], int n) {
    for (int i = 0; i < n - 1; ++i)
        cout << path[i] << " -> ";
    cout << path[n - 1];
}

int main() {
    int V;
    cin >> V;

    int graph[MAXN][MAXN];
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
        }
    }

    initialise(V, graph);
    floydWarshall(V);

    int source = 0; 

    int dest;
    cin >> dest;

    int path[MAXN];
    path[0] = source;
    int index = 1;
    while (source != dest) {
        source = Next[source][dest];
        path[index++] = source; 
    }

    cout << "Shortest path from Source to destination " << dest << ": ";
    printPath(path, index);

    return 0;
}
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Question No: 4
reportIcon
Single File Programming Question
Problem Statement



Varsha is a computer science student working on algorithms. She wants to develop a program that can efficiently find the shortest path from the top-left corner to the bottom-right corner of a 2D grid. Each cell in the grid represents a node, and the weight of the edges between adjacent nodes is given. 



Varsha knows that the Floyd-Warshall algorithm can help her solve this problem effectively.



Help Varsha write a program that uses the Floyd-Warshall algorithm to find the shortest path from the top-left corner to the bottom-right corner in the given 2D grid.

Input format :
The first line of input consists of an integer V, representing the number of vertices in the grid (VxV grid).

The next V lines contain V space-separated integers, representing the adjacency matrix of the grid.

Each cell graph [i][j] indicates the weight of the edge between node i and node j.

If there is no direct edge (not reachable), the weight is represented by a value of INF (10000000).

Output format :
The output prints a single line representing the shortest path from the top-left corner (node 0) to the bottom-right corner (node V-1).

Print the nodes in the path, separated by "->".

Code constraints :
The test cases will fall under the following constraints:

2 ≤ V ≤ 10 (number of territories in the grid)

0 ≤ graph[i][j] ≤ 10000000

0 ≤ u, v ≤ V-1

Sample test cases :
Input 1 :
4
0 3 10000000 7
8 0 2 10000000
5 10000000 0 1
2 10000000 10000000 0
Output 1 :
0 -> 1 -> 2 -> 3
Input 2 :
3
0 1 2
1 0 3
2 3 0
Output 2 :
0 -> 2
Input 3 :
4
0 5 10000000 10
10000000 0 3 10000000
10000000 10000000 0 1
10000000 10000000 10000000 0
Output 3 :
0 -> 1 -> 2 -> 3





























#include <iostream>
#include <vector>

using namespace std;

const int INF = 10000000;

void printPath(const vector<vector<int>>& next, int i, int j) {
    if (i != j && next[i][j] != -1) {
        printPath(next, i, next[i][j]);
        cout << " -> ";
    }
    cout << j;
}

void floydWarshall(int V, vector<vector<int>>& graph) {
    vector<vector<int>> dist(V, vector<int>(V, 0));
    vector<vector<int>> next(V, vector<int>(V, -1));

    // Initialize distance matrix and next matrix
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            dist[i][j] = graph[i][j];
            if (graph[i][j] != INF && i != j) {
                next[i][j] = i;
            }
        }
    }

    // Floyd-Warshall algorithm
    for (int k = 0; k < V; ++k) {
        for (int i = 0; i < V; ++i) {
            for (int j = 0; j < V; ++j) {
                if (dist[i][k] != INF && dist[k][j] != INF && dist[i][k] + dist[k][j] < dist[i][j]) {
                    dist[i][j] = dist[i][k] + dist[k][j];
                    next[i][j] = next[k][j];
                }
            }
        }
    }

    // Print the shortest path
    //cout << "Shortest Path: ";
    printPath(next, 0, V - 1);
    cout << endl;
}

int main() {
    int V;
    //cout << "Enter the number of vertices (V): ";
    cin >> V;

    vector<vector<int>> graph(V, vector<int>(V, 0));

    //cout << "Enter the adjacency matrix:" << endl;
    for (int i = 0; i < V; ++i) {
        for (int j = 0; j < V; ++j) {
            cin >> graph[i][j];
            if (graph[i][j] == 0 && i != j) {
                graph[i][j] = INF;
            }
        }
    }

    floydWarshall(V, graph);

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


