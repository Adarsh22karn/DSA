Single File Programming Question
Problem Statement



You are working on a financial application that deals with investment portfolios represented as a binary tree. Each node in the binary tree represents a specific investment and holds a numerical value indicating the investment's worth.



Your task is to implement an algorithm in your financial application, which will allow you to accurately calculate the total value of the investment portfolio represented by the binary tree, facilitating better decision-making and analysis for your clients.



The algorithm performs a preorder traversal of the binary tree, where the value of the current node is added to the sum before visiting its children. By visiting each node in a prearranged manner, we ensure that every element in the tree is accounted for in the sum calculation.

Input format :
The first line of input consists of a single integer N, representing the number of nodes in the binary tree.

The second line consists of N space-separated integers, representing the values of the nodes in the binary tree.

Output format :
The output prints the sum of all elements in the binary tree.

Sample test cases :
Input 1 :
7
5 3 8 2 4 7 9
Output 1 :
38
Input 2 :
4
74 12 35 96
Output 2 :
217





























#include <iostream>

// Binary tree node definition
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Function to perform a preorder traversal and calculate the sum
int calculateSum(TreeNode* root) {
    if (root == nullptr) {
        return 0;
    }
    int sum = root->value;
    sum += calculateSum(root->left);
    sum += calculateSum(root->right);
    return sum;
}

int main() {
    int N;
    std::cin >> N;
    
    if (N == 0) {
        std::cout << "0" << std::endl;
        return 0;
    }

    TreeNode* root = nullptr;
    
    for (int i = 0; i < N; i++) {
        int value;
        std::cin >> value;
        // Build the binary tree
        if (root == nullptr) {
            root = new TreeNode(value);
        } else {
            TreeNode* current = root;
            while (true) {
                if (value < current->value) {
                    if (current->left == nullptr) {
                        current->left = new TreeNode(value);
                        break;
                    } else {
                        current = current->left;
                    }
                } else {
                    if (current->right == nullptr) {
                        current->right = new TreeNode(value);
                        break;
                    } else {
                        current = current->right;
                    }
                }
            }
        }
    }

    int sum = calculateSum(root);
    std::cout << sum << std::endl;

    // Free memory by deleting nodes
    // Add code here to delete the tree nodes

    return 0;
}

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Single File Programming Question
Problem Statement



Sara is an aspiring computer scientist working on a binary tree problem. Her task is to compare two binary trees to see if they are identical in structure and values. Can you assist her in solving this challenge?



To accomplish this, you need to develop a function that takes the roots of two binary trees as input and performs a preorder traversal on both trees simultaneously. 



During the traversal, you will compare the values of the corresponding nodes in both trees. If at any point the values differ, the trees are not identical, and the function should return false. However, if the traversal completes without finding any differences, the trees are considered identical, and the function should return true.

Input format :
The first line of input consists of an integer n1, followed by a list of space-separated integers representing the elements to be inserted into the first binary tree.

The third line consists of an integer n2, followed by a list of space-separated integers representing the elements to be inserted into the second binary tree.

Output format :
If the two binary trees are identical, the output prints, "The two binary trees are identical."

Otherwise, print "The two binary trees are not identical."

Sample test cases :
Input 1 :
5
10 5 15 2 8
5
10 5 15 2 8
Output 1 :
The two binary trees are identical.
Input 2 :
3
5 12 8
3
10 2 1
Output 2 :
The two binary trees are not identical.
Input 3 :
3
10 2 8
2
10 2
Output 3 :
The two binary trees are not identical.






































#include <iostream>

// Binary tree node definition
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Function to compare two binary trees
bool areIdentical(TreeNode* root1, TreeNode* root2) {
    if (root1 == nullptr && root2 == nullptr) {
        return true;
    }
    if (root1 == nullptr || root2 == nullptr) {
        return false;
    }
    if (root1->value != root2->value) {
        return false;
    }
    return areIdentical(root1->left, root2->left) && areIdentical(root1->right, root2->right);
}

int main() {
    int n1, n2;
    std::cin >> n1;
    
    TreeNode* root1 = nullptr;
    
    for (int i = 0; i < n1; i++) {
        int value;
        std::cin >> value;
// Build the first binary tree
        if (root1 == nullptr) {
            root1 = new TreeNode(value);
        } else {
            TreeNode* current = root1;
            while (true) {
                if (value < current->value) {
                    if (current->left == nullptr) {
                        current->left = new TreeNode(value);
                        break;
                    } else {
                        current = current->left;
                    }
                } else {
                    if (current->right == nullptr) {
                        current->right = new TreeNode(value);
                        break;
                    } else {
                        current = current->right;
                    }
                }
            }
        }
    }

    std::cin >> n2;
    
    TreeNode* root2 = nullptr;
    
    for (int i = 0; i < n2; i++) {
        int value;
        std::cin >> value;
        // Build the second binary tree
        if (root2 == nullptr) {
            root2 = new TreeNode(value);
        } else {
            TreeNode* current = root2;
            while (true) {
                if (value < current->value) {
                    if (current->left == nullptr) {
                        current->left = new TreeNode(value);
                        break;
                    } else {
                        current = current->left;
                    }
                } else {
                    if (current->right == nullptr) {
                        current->right = new TreeNode(value);
                        break;
                    } else {
                        current = current->right;
                    }
                }
            }
        }
    }

    if (areIdentical(root1, root2)) {
        std::cout << "The two binary trees are identical." << std::endl;
    } else {
        std::cout << "The two binary trees are not identical." << std::endl;
    }

    // Add code here to delete the tree nodes and free memory

    return 0;
}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Single File Programming Question
Problem Statement



Bindu is working on a problem involving tree traversal, particularly the in-order traversal of a tree. She needs to construct a binary search tree (BST) from a set of integers and then traverse it in an in-order manner. 



Can you help her?



Write a program that takes a set of integers as input and constructs a binary search tree (BST) from those integers. After constructing the BST, perform an in-order traversal and display the elements in sorted order.

Input format :
The first line of input consists of an integer N, representing the number of integers to be inserted into the BST.

The second line consists of N space-separated integers, which are the elements to be inserted into the BST.

Output format :
The output displays the elements of the BST after performing an in-order traversal.

Sample test cases :
Input 1 :
5
4 2 6 1 3
Output 1 :
1 2 3 4 6 
Input 2 :
10
8 4 12 2 6 10 14 1 3 5
Output 2 :
1 2 3 4 5 6 8 10 12 14



































#include <iostream>

// Binary tree node definition
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Function to insert a value into the BST
TreeNode* insert(TreeNode* root, int value) {
    if (root == nullptr) {
        return new TreeNode(value);
    }
    if (value < root->value) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// In-order traversal to display elements in sorted order
void inOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left);
    std::cout << root->value << " ";
    inOrderTraversal(root->right);
}

int main() {
    int N;
    std::cin >> N;
    
    TreeNode* root = nullptr;

    for (int i = 0; i < N; i++) {
        int value;
        std::cin >> value;
        root = insert(root, value);
    }

    inOrderTraversal(root);
    std::cout << std::endl;

    // Add code here to delete the tree nodes and free memory

    return 0;
}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Single File Programming Question
Problem Statement



Sarah is managing a list of students' exam scores. She needs a tool to help her organize the scores in sorted order and easily view the scores of each student. She decides to use a binary search tree to achieve this.



Your task is to help Sarah, and you need to construct the binary search tree using these integers (exam scores) and print its in-order traversal. 



The input stream will continue indefinitely until a value less than 1 is encountered, at which point the program should terminate and output the in-order traversal of the tree.

Input format :
The input consists of a space-separated stream of positive integers, representing the exam scores. The input stops when a non-positive (less than 1) integer is encountered.

Output format :
The output displays the integers (Exam scores) from the binary search tree, displayed in sorted order using an in-order traversal, separated by spaces.

Code constraints :
0 <= Exam Scores <= 100

Sample test cases :
Input 1 :
53 57 42 69 27 0
Output 1 :
27 42 53 57 69 
Input 2 :
82 91 38 -1
Output 2 :
38 82 91 



































#include <iostream>

// Binary tree node definition
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;
    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Function to insert a value into the BST
TreeNode* insert(TreeNode* root, int value) {
    if (root == nullptr) {
        return new TreeNode(value);
    }
    if (value < root->value) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }
    return root;
}

// In-order traversal to display elements in sorted order
void inOrderTraversal(TreeNode* root) {
    if (root == nullptr) {
        return;
    }
    inOrderTraversal(root->left);
    std::cout << root->value << " ";
    inOrderTraversal(root->right);
}

int main() {
    TreeNode* root = nullptr;
    int score;

    while (true) {
        std::cin >> score;
        if (score < 1) {
            break; // Terminate the input stream
        }
        root = insert(root, score);
    }

    inOrderTraversal(root);
    std::cout << std::endl;

    // Add code here to delete the tree nodes and free memory

    return 0;
}
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000




