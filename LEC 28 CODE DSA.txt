Question No: 1
reportIcon
Single File Programming Question
Problem Statement



Kathir is learning about binary search trees (BSTs) in his computer science class. He has just implemented a simple program to create a binary search tree and calculate the sum of all its leaf nodes. Can you help him validate his code and solve some scenarios to test it?



For example, consider a tree with the following structure:

   5

   / \

  3  7

  / \  \

 2  4  9



In this tree, the leaf nodes are 2, 4, and 9. The program should compute the sum of these leaf node elements, which is 2 + 4 + 9 = 15.

Input format :
The input consists of a series of positive integers as input, each on a separate line.

The input terminates when Kathir enters -1. This signifies the end of input.

You can assume that the input integers are unique.

Output format :
The output displays the sum of all the leaf nodes in the binary search tree in the following format:

"Sum of all leaf nodes are <<value>>"



Refer to the sample output for the formatting specifications.

Code constraints :
All input integers will be positive integers (greater than 0).

The number of nodes in the binary tree is at most 100.

The value of each node is at most 100.

Sample test cases :
Input 1 :
5
3
7
2
4
9
-1
Output 1 :
Sum of all leaf nodes are 15
Input 2 :
6
3
1
4
2
-1
Output 2 :
Sum of all leaf nodes are 6






































#include <iostream>
using namespace std;

// Define the structure of a binary search tree (BST) node
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Function to insert a value into the BST
TreeNode* insert(TreeNode* root, int value) {
    if (root == nullptr) {
        return new TreeNode(value);
    }

    if (value < root->value) {
        root->left = insert(root->left, value);
    } else if (value > root->value) {
        root->right = insert(root->right, value);
    }

    return root;
}

// Function to calculate the sum of leaf nodes in the BST
int sumLeafNodes(TreeNode* root) {
    if (root == nullptr) {
        return 0;
    }

    if (root->left == nullptr && root->right == nullptr) {
        return root->value;
    }

    int leftSum = sumLeafNodes(root->left);
    int rightSum = sumLeafNodes(root->right);

    return leftSum + rightSum;
}

int main() {
    TreeNode* root = nullptr;
    int value;

    while (true) {
        cin >> value;
        if (value == -1) {
            break;
        }

        root = insert(root, value);
    }

    int leafSum = sumLeafNodes(root);

    cout << "Sum of all leaf nodes are " << leafSum << endl;

    return 0;
}
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Single File Programming Question
Problem Statement



Josh is fascinated by binary trees, and he has learned about inserting elements into a binary search tree and performing pre-order traversal. He decided to write a program to practice these concepts. Help Josh write a program that inserts elements into a binary search tree (BST) and performs a pre-order traversal.

Input format :
The first line of input contains an integer t, representing the number of elements Josh wants to insert into the BST.

The following t lines each contain t integer values representing the data to be inserted into the BST, separated by a space.

Output format :
The output displays a single line with space-separated integers representing the pre-order traversal of the BST.



Refer to the sample output for the formatting specifications.

Code constraints :
1 ≤ t ≤ 100

1 <= data <= 1000

Sample test cases :
Input 1 :
5
10 5 15 3 7
Output 1 :
10 5 3 7 15 
Input 2 :
7
8 3 10 1 6 14 4
Output 2 :
8 3 1 6 4 10 14 




































#include <iostream>
using namespace std;

// Define the structure of a binary search tree (BST) node
struct TreeNode {
    int value;
    TreeNode* left;
    TreeNode* right;

    TreeNode(int val) : value(val), left(nullptr), right(nullptr) {}
};

// Function to insert a value into the BST
TreeNode* insert(TreeNode* root, int value) {
    if (root == nullptr) {
        return new TreeNode(value);
    }

    if (value < root->value) {
        root->left = insert(root->left, value);
    } else {
        root->right = insert(root->right, value);
    }

    return root;
}

// Function to perform a pre-order traversal of the BST
void preOrderTraversal(TreeNode* root) {
    if (root != nullptr) {
        cout << root->value << " ";
        preOrderTraversal(root->left);
        preOrderTraversal(root->right);
    }
}

int main() {
    int t;
    cin >> t;

    TreeNode* root = nullptr;

    for (int i = 0; i < t; i++) {
        int value;
        cin >> value;
        root = insert(root, value);
    }

    //cout << "Pre-order traversal: ";
    preOrderTraversal(root);
    cout << endl;

    return 0;
}
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Single File Programming Question
Problem Statement



Gayu is studying data structures, and she wants to implement a program that performs various operations on a Binary Search Tree (BST).



Gayu to create a Binary Search Tree (BST) and perform the following operations:



Create BST: Gayu can create a BST by providing the number of nodes (n) and a list of n integer values. The program constructs the BST using these values.
Print Postorder: Gayu can print the elements of the BST in postorder traversal, which means that the program will display the values in the left subtree, then the right subtree, and finally the root of each subtree.
Exit: Gayu can exit the program.
Input format :
The first input consists of the choice.

If the choice is 1, enter the number of elements (n) and the space-separated elements (i) to be inserted into the tree.

If the choice is 2, print the post-order traversal.

If the choice is 3, exit.

If the choice is greater than 3, print "Wrong choice".

(By default, all the test cases have all the choices from 1–3, but the n and i values keep changing.)



Refer to the sample input for a better understanding.

Output format :
The first line of output consists of the following format:

"BST with %d nodes is ready to use!\n", where %d is the number of nodes in the BST.

The second line of output consists of the following format:

"BST Traversal in POSTORDER\n"

The third line of output consists of the following format:

A space-separated list of integers representing the elements of the BST in postorder traversal.

The fourth line of output consists of the following format:

If input an invalid choice (other than 1, 2, or 3),

"Wrong choice\n"



Refer to the sample output for a better understanding.

Code constraints :
The BST can have duplicate elements.

The maximum number of nodes (n) is 15.

The integer values can be in the range of 1 to 102.

Sample test cases :
Input 1 :
1
5
12 78 96 34 55
2
3
Output 1 :
BST with 5 nodes is ready to use!
BST Traversal in POSTORDER
55 34 96 78 12 
Input 2 :
1
9
7 9 6 3 2 1 4 5 8
2
5
3
Output 2 :
BST with 9 nodes is ready to use!
BST Traversal in POSTORDER
1 2 5 4 3 6 8 9 7 
Wrong choice





































// You are using GCC
#include <iostream>
#include <stdlib.h>

using namespace std;

struct tnode {
    int data;
    struct tnode *right;
    struct tnode *left;
};

struct tnode *CreateBST(struct tnode *, int);
void Postorder(struct tnode *);


//Write Your code



int main() {
    struct tnode *root = NULL;
    int choice, item, n, i;
    do {
        cin >> choice;
        switch (choice) {
            case 1:
                root = NULL;
                cin >> n;
                for (i = 1; i <= n; i++) {
                    cin >> item;
                    root = CreateBST(root, item);
                }
                cout << "BST with " << n << " nodes (without duplicates) is ready to use!" << "\n";
                break;
            case 2:
                cout << "BST Traversal in POSTORDER" << "\n";
                Postorder(root);
                cout << "\n";
                break;
            case 3:
                exit(0);
                break;
            default:
                cout << "Wrong choice" << "\n";
                break;
        }
    } while (1);
    return 0;
}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
