  Single File Programming Question

Problem Statement


You are developing a ticket management system for a popular theater. The system uses a Queue data structure to handle the ticketing process efficiently. Your task is to implement a program that simulates the ticket management system using an array-based queue.


The program should provide a user-friendly interface for theater staff to perform queue operations. 


    They should be able to insert a ticket into the queue, delete a ticket from the queue, and display the tickets in the queue.
    The queue has a maximum capacity of 5 tickets. If the queue is full and an insertion is attempted, the program should display a message saying "Queue is full."
    If the queue is empty and a deletion is attempted, the program should display a message saying "Queue is empty." 


The program should handle these conditions appropriately and ensure that the queue operations are performed correctly.
Input format :

The input consists of an integer option representing the action to be performed:

Option 1: Insert an element into the queue. The next line contains an integer representing the element to be inserted.

Option 2: Delete an element from the queue.

Option 3: Display the elements in the queue.
Output format :

For each operation, the program should provide the appropriate output messages:

If option 1 is chosen, display a message indicating that the element is inserted in the queue.

If the maximum capacity of the queue is reached, and insertion is attempted, print "Queue is full."

If option 2 is chosen, display the deleted number.

If option 2 is chosen and if the queue is empty, and no elements can be deleted, print "Queue is empty."

If option 3 is chosen, display the elements in the queue.

If any other option other than 1, 2, or 3 is given, print "Invalid option."


Refer to the sample output for the exact text and format.
Code constraints :

The maximum size of the queue is defined as max = 5.

The queue can store integer values.
Sample test cases :
Input 1 :

1
10
3
5

Output 1 :

10 is inserted in the queue.
Elements in the queue are: 10 
Invalid option.

Input 2 :

1
30
1
40
2
3

Output 2 :

30 is inserted in the queue.
40 is inserted in the queue.
Deleted number is: 30
Elements in the queue are: 40 

Input 3 :

1
97
2
3

Output 3 :

97 is inserted in the queue.
Deleted number is: 97
Queue is empty.

Input 4 :

1
12
1
23
1
34
1
45
1
56
1
32

Output 4 :

12 is inserted in the queue.
23 is inserted in the queue.
34 is inserted in the queue.
45 is inserted in the queue.
56 is inserted in the queue.
Queue is full.





















#include <iostream>
using namespace std;

class Queue {
private:
    int front, rear, size;
    int* arr;

public:
    Queue(int capacity) {
        size = capacity;
        front = rear = -1;
        arr = new int[size];
    }

    bool isFull() {
        return (rear == size - 1);
    }

    bool isEmpty() {
        return (front == -1);
    }

    void enqueue(int item) {
        if (isFull()) {
            cout << "Queue is full." << endl;
            return;
        }
        if (isEmpty()) {
            front = rear = 0;
        }
        else {
            rear++;
        }
        arr[rear] = item;
        cout << item << " is inserted in the queue." << endl;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return;
        }
        int item = arr[front];
        if (front == rear) {
            front = rear = -1;
        }
        else {
            front++;
        }
        cout << "Deleted number is: " << item << endl;
    }

    void display() {
        if (isEmpty()) {
            cout << "Queue is empty." << endl;
            return;
        }
        cout << "Elements in the queue are: ";
        for (int i = front; i <= rear; i++) {
            cout << arr[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    int capacity, n;
    cin >> capacity;

    Queue queue(capacity);

    for (int i = 0; i < capacity; i++) {
        cin >> n;
        queue.enqueue(n);
    }

    int numOps;
    cin >> numOps;

    for (int i = 0; i < numOps; i++) {
        int option;
        cin >> option;
        if (option == 1) {
            cin >> n;
            queue.enqueue(n);
        }
        else if (option == 2) {
            queue.dequeue();
        }
        else if (option == 3) {
            queue.display();
        }
    }

    return 0;
}



00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement 


Write a program to implement a specialized queue data structure capable of deleting the smallest element within its contents. The program should also handle standard enqueue and dequeue operations.
Input format :

The first line of input consists of an integer N, representing the number of elements in the queue.

The following N lines consist of N floating-point numbers, separated by space, representing the elements of the queue.
Output format :

If the queue is empty, N = 0, output "Queue is empty".

Otherwise, output the elements of the queue after deleting the smallest element.
Code constraints :

The queue should have a fixed maximum size of 100 elements.
Sample test cases :
Input 1 :

5
12.3
45.6
36.4
74.5
94.1

Output 1 :

45.6 36.4 74.5 94.1 

Input 2 :

2
2.5
3.5

Output 2 :

3.5 

Input 3 :

0

Output 3 :

Queue is empty



















#include <iostream>
#include <vector>
#include <limits>
using namespace std;

// Function to delete the smallest element from the queue
void deleteSmallest(vector<double>& queue) {
    if (queue.empty()) {
        return;
    }

    double minValue = numeric_limits<double>::max();
    int minIndex = -1;

    // Find the index of the smallest element
    for (int i = 0; i < queue.size(); ++i) {
        if (queue[i] < minValue) {
            minValue = queue[i];
            minIndex = i;
        }
    }

    // Remove the smallest element
    if (minIndex >= 0) {
        queue.erase(queue.begin() + minIndex);
    }
}

int main() {
    int N;
    cin >> N;

    vector<double> queue;

    // Read elements into the queue
    for (int i = 0; i < N; ++i) {
        double element;
        cin >> element;
        queue.push_back(element);
    }

    // Check if the queue is empty
    if (N == 0) {
        cout << "Queue is empty" << endl;
    } else {
        // Delete the smallest element
        deleteSmallest(queue);

        // Output the updated queue
        for (double element : queue) {
            cout << element << " ";
        }
        cout << endl;
    }

    return 0;
}

00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


Write a program to implement a priority queue using an array-based approach. 


The priority queue should support the following operations:

    Enqueue: Insert an element into the priority queue with a specified priority.
    Dequeue: Remove the element with the highest priority from the priority queue.
    isEmpty: Check if the priority queue is empty.
    isFull: Check if the priority queue is full.
    printPriorityQueue: Print the elements of the priority queue in the order of their priorities.


Note: This kind of question will be helpful in clearing Wipro recruitment.
Input format :

The first line of input consists of an integer N, representing the number of elements to be inserted into the priority queue.

This is followed by N lines, each containing two space-separated integers: element and priority.

The element represents the value to be inserted, and priority represents its priority. The priorities are non-negative integers.
Output format :

The first line of output prints the initial state of the priority queue after inserting all the elements, based on priority.

The second line prints the state of the priority queue after performing the dequeue operation.


Refer to the sample output for the exact text and format.
Code constraints :

The priority queue can store up to 100 elements (MAX_SIZE = 100).

Each element value is an integer ranging from âˆ’102 to 102

Each priority value is an integer ranging from 1 to 100.
Sample test cases :
Input 1 :

5
4 2
3 1
6 4
2 3
1 5

Output 1 :

Priority Queue: 3 4 2 6 1 
Priority Queue: 4 2 6 1 

Input 2 :

3
9 1
2 2
7 3

Output 2 :

Priority Queue: 9 2 7 
Priority Queue: 2 7 




















#include <iostream>
using namespace std;

const int MAX_SIZE = 100;

class PriorityQueue {
private:
    int elements[MAX_SIZE];
    int priorities[MAX_SIZE];
    int size;

public:
    PriorityQueue() {
        size = 0;
    }

    void enqueue(int element, int priority) {
        if (isFull()) {
            cout << "Priority Queue is full. Cannot enqueue." << endl;
            return;
        }

        int i = size - 1;
        while (i >= 0 && priorities[i] > priority) {
            elements[i + 1] = elements[i];
            priorities[i + 1] = priorities[i];
            i--;
        }

        elements[i + 1] = element;
        priorities[i + 1] = priority;
        size++;
    }

    void dequeue() {
        if (isEmpty()) {
            cout << "Priority Queue is empty. Cannot dequeue." << endl;
            return;
        }

        for (int i = 0; i < size - 1; i++) {
            elements[i] = elements[i + 1];
            priorities[i] = priorities[i + 1];
        }

        size--;
    }

    bool isEmpty() {
        return size == 0;
    }

    bool isFull() {
        return size == MAX_SIZE;
    }

    void printPriorityQueue() {
        for (int i = 0; i < size; i++) {
            cout << elements[i] << " ";
        }
        cout << endl;
    }
};

int main() {
    int n;
    cin >> n;

    PriorityQueue priorityQueue;

    for (int i = 0; i < n; i++) {
        int element, priority;
        cin >> element >> priority;
        priorityQueue.enqueue(element, priority);
    }

    cout << "Priority Queue: ";
    priorityQueue.printPriorityQueue();

    priorityQueue.dequeue();

    cout << "Priority Queue: ";
    priorityQueue.printPriorityQueue();

    return 0;
}

00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


You are assigned the task of developing a package delivery system for a logistics company. The system should enable efficient management of packages for delivery, including prioritizing deliveries based on certain criteria.


The program utilizes a priority queue to manage packages for delivery. Each package is represented by its destination and delivery priority. The delivery priority is a value between 1 and 5, with lower values indicating higher priority for delivery. (1 has the highest priority, next 2, and so on)


The system offers the following options Add package, Deliver package, View next package for delivery, and Exit.
Input format :

The input consists of an integer representing the choice from the menu.

Choice 1: Add package

Choice 2: Deliver the package

Choice 3: View the next package for delivery

Choice 4: Exit


For Choice 1, the program expects the following inputs on separate lines:

    Package destination (string with spaces allowed)
    Delivery priority (integer between 1 and 5, inclusive)


For choice 2, choice 3, and for choice 4, no additional input is required.
Output format :

The program outputs messages based on the user's choices.

When adding a package to the delivery queue, the program outputs: "Package added to the delivery queue."

When delivering a package, the program outputs: "Delivered package to: [Package Destination]"

A lower delivery priority value indicates a higher priority.

When viewing the next package for delivery, the program outputs: "Next package for delivery: [Package Destination]"

When exiting the application, the program outputs: "Exiting the application."

For invalid choices, the program outputs: "Invalid choice."

When there are no packages in the delivery queue, the program outputs: "No packages in the delivery queue."


Refer to the sample output for the exact text and format.
Code constraints :

Queue size should be 5.
Sample test cases :
Input 1 :

1
Paris
3
1
San Francisco
2
2
4

Output 1 :

Package added to the delivery queue.
Package added to the delivery queue.
Delivered package to: San Francisco
Exiting the application.

Input 2 :

1
New York
2
2
4

Output 2 :

Package added to the delivery queue.
Delivered package to: New York
Exiting the application.

Input 3 :

1
London
4
3
4

Output 3 :

Package added to the delivery queue.
Next package for delivery: London
Exiting the application.

Input 4 :

5
4

Output 4 :

Invalid choice.
Exiting the application.

Input 5 :

2
4

Output 5 :

No packages in the delivery queue.
Exiting the application.



















#include <iostream>
#include <queue>
#include <string>

using namespace std;

struct Package {
    string destination;
    int priority;

    // Overloading the less than operator for priority queue
    bool operator<(const Package& other) const {
        return priority > other.priority; // Higher priority has lower value
    }
};

int main() {
    priority_queue<Package> deliveryQueue;

    while (true) {
        int choice;
        cin >> choice;

        switch (choice) {
            case 1: {
                Package package;
                cin.ignore(); // Clear the newline character from the input buffer
                getline(cin, package.destination);
                cin >> package.priority;

                if (deliveryQueue.size() < 5) {
                    deliveryQueue.push(package);
                    cout << "Package added to the delivery queue." << endl;
                } else {
                    cout << "Delivery queue is full. Cannot add more packages." << endl;
                }
                break;
            }
            case 2: {
                if (!deliveryQueue.empty()) {
                    Package delivered = deliveryQueue.top();
                    deliveryQueue.pop();
                    cout << "Delivered package to: " << delivered.destination << endl;
                } else {
                    cout << "No packages in the delivery queue." << endl;
                }
                break;
            }
            case 3: {
                if (!deliveryQueue.empty()) {
                    Package nextPackage = deliveryQueue.top();
                    cout << "Next package for delivery: " << nextPackage.destination << endl;
                } else {
                    cout << "No packages in the delivery queue." << endl;
                }
                break;
            }
            case 4:
                cout << "Exiting the application." << endl;
                return 0;
            default:
                cout << "Invalid choice." << endl;
        }
    }

    return 0;
}

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


You are tasked with implementing a priority queue for a hospital's emergency room. The emergency room receives patients with different levels of severity, and it's crucial to treat patients based on their priority. 


The program should allow the hospital staff to do the following:

    Add patients to the priority queue: The staff should be able to enter the patient's age and severity level. The severity level is an integer value that indicates the urgency of the patient's condition, where a lower value represents a higher priority.
    View the current queue: The staff should be able to view the list of patients in the queue, ordered by their priority.

Input format :

The first line of input consists of an integer N, representing the number of elements in the priority queue.

The following N lines consist of two space-separated integers: data and priority values.
Output format :

The output prints the elements of the priority queue in order of their priority.

If the priority queue is empty, it prints the message "Priority queue is empty"


Refer to the sample output for the exact text and format.
Code constraints :

The value of N, representing the number of elements in the priority queue, should be a non-negative integer.

The data and priority values entered should be integers.

The priority values should be non-negative integers.
Sample test cases :
Input 1 :

5
12 5
45 3
78 2
36 4
95 1

Output 1 :

Priority queue elements: 95 78 45 36 12 

Input 2 :

3
12 2
45 3
78 1

Output 2 :

Priority queue elements: 78 12 45 

Input 3 :

0

Output 3 :

Priority queue elements: Priority queue is empty





















#include <iostream>
#include <queue>
using namespace std;

struct Patient {
    int data;
    int priority;

    // Custom comparator for the priority queue
    bool operator<(const Patient& other) const {
        // Lower priority values represent higher urgency
        return priority > other.priority;
    }
};

int main() {
    int N;
    cin >> N;

    priority_queue<Patient> priorityQueue;

    for (int i = 0; i < N; ++i) {
        Patient patient;
        cin >> patient.data >> patient.priority;
        priorityQueue.push(patient);
    }

    if (priorityQueue.empty()) {
        cout << "Priority queue is empty" << endl;
    } else {
        cout << "Priority queue elements: ";
        while (!priorityQueue.empty()) {
            cout << priorityQueue.top().data << " ";
            priorityQueue.pop();
        }
        cout << endl;
    }

    return 0;
}













