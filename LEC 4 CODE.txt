1> Problem Statement

ï»¿

Pooja is a teacher who recently conducted two exams for her students, "Mathematics" and "Science." She is working on a program to merge the scores of both exams and identify the maximum score achieved by any student.


The program takes two arrays, mathScores, and scienceScores, as inputs. Each array represents the scores of the respective subjects for all the students. Pooja wants to combine the arrays and find the maximum score obtained by any student in both exams.


By merging the arrays, Pooja can have a comprehensive view of the student's performance across both subjects and identify the highest score achieved, which can be helpful for further analysis or recognizing outstanding performance.


Note: This is a sample question asked in CTS recruitment.
Input format :

The first line of input consists of the number of elements n in the first array.

The second line of input consists of n elements, separated by space.

The third line of input consists of the number of elements m in the second array.

The fourth line of input consists of m elements, separated by space.
Output format :

The output prints the maximum element in the merged array.
Sample test cases :
Input 1 :

6
1 2 3 4 5 2
7
4 5 6 7 8 6 6

Output 1 :

8

Input 2 :

3
2 2 2
4
3 4 5 6

Output 2 :

6



#include<iostream>
using namespace std;
int main()
{
    int s1,s2,a1[100],a2[100],i;
    cin>>s1;
    for(i=0;i<s1;i++)
    {
        cin>>a1[i];
    }
    cin>>s2;
    for(i=0;i<s2;i++)
    {
        cin>>a2[i];
    }
    int size=s1+s2;
    int merged[size];
    for(i=0;i<s1;i++)
    {
        merged[i]=a1[i];
    }
    for(i=0;i<s2;i++)
    {
        merged[s1+i]=a2[i];
    }
    int max=merged[0];
    for (i=1;i<size;i++)
    {
        if (merged[i]>max)
        {
            max=merged[i];
        }
    }
    cout<<max;
}


00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Problem Statement


You are working on a project that involves merging two arrays and performing the sum between corresponding elements. The arrays represent the daily sales of two different products over a week.


Your task is to write a program that takes input from the user for the two arrays and performs the sum between corresponding elements.


Note: This is a sample question asked in TCS recruitment.
Input format :

The first line of input consists of the size of the array n.

The second line of input consists of n elements inside the first array.

The third line of input consists of the size of the array m.

The fourth line of input consists of m elements inside the second array.
Output format :

The output represents the sum between corresponding elements, separated by space.
Sample test cases :
Input 1 :

5
1 2 3 4 5
6
6 7 8 9 10 11

Output 1 :

7 9 11 13 15 11 

Input 2 :

3
1 2 3
2
4 5

Output 2 :

5 7 3 
   



#include <iostream>

using namespace std;

int main() {
    int s1, s2;
    int a1[100], a2[100];

    //cout << "Enter the size of the first array: ";
    cin >> s1;
   // cout << "Enter " << s1 << " elements for the first array: ";
    for (int i = 0; i < s1; ++i) {
        cin >> a1[i];
    }

    //cout << "Enter the size of the second array: ";
    cin >> s2;
    //cout << "Enter " << s2 << " elements for the second array: ";
    for (int i = 0; i < s2; ++i) {
        cin >> a2[i];
    }

    int maxSize = max(s1, s2);
    
    // Perform sum between corresponding elements
    for (int i = 0; i < maxSize; ++i) {
        int sum = 0;
        
        if (i < s1) {
            sum += a1[i];
        }
        
        if (i < s2) {
            sum += a2[i];
        }
        
        cout << sum << " ";
    }
    
    cout << endl;

    return 0;
}


00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Problem Statement


At a university, two student clubs, "Tech Wizards" and "Creative Minds," have decided to merge and form a new club called "Innovative Thinkers."


As part of the merger process, the club leaders, Alex and Sarah, need to create a program that merges the member lists of the two clubs and identifies the unique members in the merged list.


The program takes two arrays, arr1, and arr2, as inputs. Each array represents the member IDs of the respective clubs. Alex and Sarah want to combine the arrays and generate a single array, merged, containing all the unique member IDs.


To ensure a seamless merger, the program should eliminate any duplicate member IDs and only include unique IDs in the merged array. This way, they can maintain a consolidated member list without repetition.


Note: This is a sample question asked in Capgemini recruitment.
Input format :

The first line of input consists of the number of elements n in the first array.

The second line of input consists of n-sorted elements, separated by space.

The third line of input consists of the number of elements m in the second array.

The fourth line of input consists of m-sorted elements, separated by space.
Output format :

The output prints the unique elements in the merged array, separated by space.
Sample test cases :
Input 1 :

5
1 2 3 4 5
7
4 5 6 6 7 7 8

Output 1 :

1 2 3 4 5 6 7 8 

Input 2 :

3
2 2 2
4
3 4 5 6

Output 2 :

2 3 4 5 6 





#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    int s1, s2;
    int a1[100], a2[100];

    //cout << "Enter the number of elements in the first array: ";
    cin >> s1;
    //cout << "Enter " << s1 << " sorted elements for the first array: ";
    for (int i = 0; i < s1; ++i) {
        cin >> a1[i];
    }

    //cout << "Enter the number of elements in the second array: ";
    cin >> s2;
    //cout << "Enter " << s2 << " sorted elements for the second array: ";
    for (int i = 0; i < s2; ++i) {
        cin >> a2[i];
    }

    int merged[s1 + s2];
    
    merge(a1, a1 + s1, a2, a2 + s2, merged);
    
    int newSize = unique(merged, merged + (s1 + s2)) - merged;

    //cout << "Merged array with unique elements: ";
    
    for (int i = 0; i < newSize; ++i) {
        cout << merged[i] << " ";
    }
    
    cout << endl;

    return 0;
}




00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Problem Statement


You have multiple arrays containing student grades for different subjects. You want to merge these arrays and calculate the average grade for each student. Write a function that takes these arrays as input and returns an array with the average grades.
Input format :

The first line of input contains the number of students (numStudents).

The second line of input contains the number of subjects (numSubjects).

The next numStudents lines contain numSubjects, space-separated grades for each student.
Output format :

The output displays the average grades for each student.

Each line of output contains the average grade for a student in the format "Student [student_number]: [average_grade]" with a round off one digit.


Refer to the sample output for formatting specifications.
Code constraints :

1 <= numStudents <= 100 (maximum number of students)

1 <= numSubjects <= 100 (maximum number of subjects)

The grades are real numbers.
Sample test cases :
Input 1 :

2
4
70 80 90 100
60 80 100 70

Output 1 :

Average grades:
Student 1: 85.0
Student 2: 77.5

Input 2 :

3
4
80 90 75 85
70 65 80 75
90 85 95 92

Output 2 :

Average grades:
Student 1: 82.5
Student 2: 72.5
Student 3: 90.5




#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    int s1, s2;
    int a1[100], a2[100];

    //cout << "Enter the number of elements in the first array: ";
    cin >> s1;
    //cout << "Enter " << s1 << " sorted elements for the first array: ";
    for (int i = 0; i < s1; ++i) {
        cin >> a1[i];
    }

    //cout << "Enter the number of elements in the second array: ";
    cin >> s2;
    //cout << "Enter " << s2 << " sorted elements for the second array: ";
    for (int i = 0; i < s2; ++i) {
        cin >> a2[i];
    }

    int merged[s1 + s2];
    
    merge(a1, a1 + s1, a2, a2 + s2, merged);
    
    int newSize = unique(merged, merged + (s1 + s2)) - merged;

    //cout << "Merged array with unique elements: ";
    
    for (int i = 0; i < newSize; ++i) {
        cout << merged[i] << " ";
    }
    
    cout << endl;

    return 0;
}


00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
Problem Statement


You are working on a mathematics application that requires merging two sorted lists of numbers into a single sorted list without any duplicates. Your task is to write a program that performs this merging operation on two lists of numbers.


Your program should merge the numbers from the first and second lists into a single sorted list, removing any duplicate numbers. The merged list should contain all the unique numbers, arranged in ascending order.


After merging the lists, your program should output the numbers in the merged list, according to the initial array.


Example


Input:

4

1 3 5 7

5

2 4 6 8 9


Output:

1 2 3 4

5 6 7 8 9


Explanation:

The first list has 4 numbers [1, 3, 5, 7], and the second list has 5 numbers [2, 4, 6, 8, 9]. After sorting, the list becomes [1, 2, 3, 4, 5, 6, 7, 8, 9] with duplicates removed and sorted in ascending order. After merging, the first list becomes [1, 2, 3, 4] and the second list becomes [5, 6, 7, 8, 9].


Note: This is a sample question asked in HCL recruitment.
Input format :

The first line of input consists of the size of the array n.

The second line of input consists of n elements inside the first array.

The third line of input consists of the size of the array m.

The fourth line of input consists of m elements inside the second array.
Output format :

After sorting the array, the first line of output prints the first n sorted numbers, and the second line prints the last m numbers.
Sample test cases :
Input 1 :

3
1 2 3
2
4 5

Output 1 :

1 2 3 
4 5 

Input 2 :

4
1 3 5 7
5
2 4 6 8 9

Output 2 :

1 2 3 4 
5 6 7 8 9 






#include <iostream>
#include <algorithm>

using namespace std;

int main() {
    int s1, s2;
    int a1[100], a2[100];

    //cout << "Enter the size of the first ingredient array: ";
    cin >> s1;
    //cout << "Enter " << s1 << " elements for the first array: ";
    for (int i = 0; i < s1; ++i) {
        cin >> a1[i];
    }

    //cout << "Enter the size of the second ingredient array: ";
    cin >> s2;
    //cout << "Enter " << s2 << " elements for the second array: ";
    for (int i = 0; i < s2; ++i) {
        cin >> a2[i];
    }

    int merged[s1 + s2];
    for (int i = 0; i < s1; ++i) {
        merged[i] = a1[i];
    }
    for (int i = 0; i < s2; ++i) {
        merged[s1 + i] = a2[i];
    }
    
    sort(merged, merged + s1 + s2);
    
    int newSize = unique(merged, merged + s1 + s2) - merged;

    int newArr1[newSize], newArr2[newSize];
    
    int size1 = 0, size2 = 0;
    
     for (int i = 0; i < newSize; ++i) {
        if (merged[i] <= 4) {
            newArr1[size1++] = merged[i];
        } else {
            newArr2[size2++] = merged[i];
        }
    }

    //cout << "First array after merging: ";
    for (int i = 0; i < size1; ++i) {
        cout << newArr1[i] << " ";
    }
    cout << endl;

    //cout << "Second array after merging: ";
    for (int i = 0; i < size2; ++i) {
        cout << newArr2[i] << " ";
    }
    cout << endl;

    return 0;
}



00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


Pooja is an aspiring chef who loves experimenting with different recipes. She is currently working on a program that merges two arrays representing ingredients and prints the minimum ingredient required in the resulting array.



Pooja often combines different ingredients from multiple recipes to create unique dishes. To keep track of the ingredients, she has created two arrays, arr1, and arr2, where each element represents a specific ingredient, and the value indicates the quantity required.



To streamline her cooking process, Pooja wants to create a program that merges the two ingredient arrays and identifies the minimum ingredient required in the resulting array. By knowing the minimum ingredient, Pooja can ensure that she has enough of that ingredient on hand for her culinary experiments.



Note: This is a sample question asked in Capgemini recruitment.

Input format :
The first line of input consists of the number of elements n in the first array.

The second line of input consists of n elements, separated by space.

The third line of input consists of the number of elements m in the second array.

The fourth line of input consists of m elements, separated by space.

Output format :
The output prints the minimum element in the merged array.

Sample test cases :
Input 1 :
6
1 2 3 4 5 2
7
4 5 6 7 8 6 6
Output 1 :
1
Input 2 :
3
2 2 2
4
3 4 5 6
Output 2 :
2






#include<iostream>
using namespace std;
int main()
{
    int a1[100],a2[100],s1,s2,i;
    cin>>s1;
    for(i=0;i<s1;i++)
    {
        cin>>a1[i];
    }
    cin>>s2;
    for(i=0;i<s2;i++)
    {
        cin>>a2[i];
    }
    int mergedsize=s1+s2;
    int mergedarray[mergedsize];
    for(i=0;i<s1;i++)
    {
        mergedarray[i]=a1[i];
    }
    for (i=0;i<s2;i++)
    {
        mergedarray[s1+i]=a2[i];
    }
    int min=mergedarray[0];
    for(i=1;i<mergedsize;i++)
    {
        if(mergedarray[i]<min)
        {
            min=mergedarray[i];
        }
    }
    cout<<min;
}

00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Problem Statement



You have an array of strings and another array of integers. Merge the two arrays such that the resulting array alternates between a string and an integer.

Input format :
The first line of input contains an integer, which represents the size of the string and integer array.

The next line of input contains strings from the string array, each separated by a space.

The last line of input contains elements of the integer array, each separated by a space.

Output format :
The output displays the merged array, where each element is separated by a space.



Refer to the sample output for formatting specifications.

Code constraints :
1 â¤ stringSize, integerSize â¤ 100 (Maximum size of the arrays).

The elements of the string array can contain alphanumeric characters and special symbols.

The elements of the integer array should be valid integers within the range of the int data type.

stringSize == integerSize

Sample test cases :
Input 1 :
3
Apple Banana Orange
1 2 3
Output 1 :
Merged Array: Apple 1 Banana 2 Orange 3 
Input 2 :
5
$@# Hello & World! {Code}
100 200 300 400 500
Output 2 :
Merged Array: $@# 100 Hello 200 & 300 World! 400 {Code} 500 



#include<iostream>
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n,a2[100],i;
    string a1[100];
    cin>>n;
    for (i=0;i<n;i++)
    {
        cin>>a1[i];
    }
    for (i=0;i<n;i++)
    {
        cin>>a2[i];
    }
    cout<<"Merged Array: ";
    for(i=0;i<n;i++)
    {
        cout<<a1[i]<<" "<<a2[i]<<" ";
    }
    
}  


0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
