 Single File Programming Question

Problem Statement


During an archaeological expedition, a team discovers the "Disk of Light," an artifact consisting of concentric rings with unique symbols. To unlock its powers, they must perform the "Tower of Wisdom" ritual.


In this ritual:


    There are three pedestals: Source (A), Auxiliary (B), and Illuminated (C).
    Disks are stacked on the Source pedestal, smaller ones on top of larger ones.
    Only one disk can be moved at a time.
    A disk can only be placed on top of a larger disk or an empty pedestal.


Write a program to assist the archaeological team in calculating the total number of times each ring of the Disk of Light is moved during the Tower of Wisdom ritual.


Note: This kind of question will be helpful in clearing TCS recruitment.
Input format :

The input consists of an integer denoting the number of disks.
Output format :

The output displays the sequence of moves required to solve the puzzle.

The last line of output displays the total number of times the disk is moved.


Refer to the sample output for formatting specifications.
Code constraints :

0 < n <= 8
Sample test cases :
Input 1 :

3

Output 1 :

Move disk 1 from A to C
Move disk 2 from A to B
Move disk 1 from C to B
Move disk 3 from A to C
Move disk 1 from B to A
Move disk 2 from B to C
Move disk 1 from A to C
Total number of times the disk is moved: 7

Input 2 :

4

Output 2 :

Move disk 1 from A to B
Move disk 2 from A to C
Move disk 1 from B to C
Move disk 3 from A to B
Move disk 1 from C to A
Move disk 2 from C to B
Move disk 1 from A to B
Move disk 4 from A to C
Move disk 1 from B to C
Move disk 2 from B to A
Move disk 1 from C to A
Move disk 3 from B to C
Move disk 1 from A to B
Move disk 2 from A to C
Move disk 1 from B to C
Total number of times the disk is moved: 15






















#include <iostream>
using namespace std;

int tower_of_wisdom(int n, char source, char auxiliary, char illuminated) {
    if (n == 1) {
        cout << "Move disk 1 from " << source << " to " << illuminated << endl;
        return 1;
    }

    int count1 = tower_of_wisdom(n - 1, source, illuminated, auxiliary);
    cout << "Move disk " << n << " from " << source << " to " << illuminated << endl;
    int count2 = tower_of_wisdom(n - 1, auxiliary, source, illuminated);

    return count1 + 1 + count2;
}

int main() {
    int n;
    cin >> n;
    char source = 'A';
    char auxiliary = 'B';
    char illuminated = 'C';

    int total_moves = tower_of_wisdom(n, source, auxiliary, illuminated);

    cout << "Total number of times the disk is moved: " << total_moves << endl;

    return 0;
}

000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


You work in a large warehouse where products are numbered from 0 to N-1. Your task is to identify any products that appear twice in the inventory list and report them in ascending order. This helps ensure accurate inventory management.


For instance, if you have N = 4 products with IDs {0, 1, 3, 2}, and no duplicates exist, you report -1. However, if you have N = 5 products with IDs {1, 1, 2, 2, 3}, you must report the duplicates in ascending order: 1 2. This ensures your warehouse maintains efficient inventory control. The input products must be listed in ascending order.


Now design a program using recursion to solve the given problem statement. 
Input format :

The first line contains an integer N, the size of the array.

The second line contains N space-separated integers a[0], a[1], ..., a[N-1], representing the elements in the array in ascending order.
Output format :

The output should be a space-separated list of integers.

If there are elements that occur twice in the given array, list them in ascending order.

If no such elements are found, the output should be "-1" to indicate that there are no duplicates.


Refer to the sample output for exact format specifications.
Code constraints :

1 <= N <= 25

0 <= a[i] <= N-1, for each valid i. The input should be in ascending order.
Sample test cases :
Input 1 :

4
0 1 3 2

Output 1 :

-1

Input 2 :

5
1 1 2 2 3

Output 2 :

1 2 


























#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

vector<int> merge(vector<int> left, vector<int> right) {
    vector<int> result;
    while (left.size() > 0 || right.size() > 0) {
        if (left.size() > 0 && right.size() > 0) {
            if (left[0] <= right[0]) {
                result.push_back(left[0]);
                left.erase(left.begin());
            }
            else {
                result.push_back(right[0]);
                right.erase(right.begin());
            }
        }
        else if (left.size() > 0) {
            result.push_back(left[0]);
            left.erase(left.begin());
        }
        else if (right.size() > 0) {
            result.push_back(right[0]);
            right.erase(right.begin());
        }
    }
    return result;
}

vector<int> merge_sort(vector<int> arr) {
    if (arr.size() <= 1) {
        return arr;
    }
    int mid = arr.size() / 2;
    vector<int> left, right, result;
    for (int i = 0; i < mid; i++) {
        left.push_back(arr[i]);
    }
    for (int i = mid; i < arr.size(); i++) {
        right.push_back(arr[i]);
    }
    left = merge_sort(left);
    right = merge_sort(right);
    result = merge(left, right);
    return result;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    vector<int> sorted_arr = merge_sort(arr);
    vector<int> duplicates;
    for (int i = 0; i < sorted_arr.size() - 1; i++) {
        if (sorted_arr[i] == sorted_arr[i + 1]) {
            duplicates.push_back(sorted_arr[i]);
        }
    }
    if (duplicates.size() == 0) {
        cout << "-1" << endl;
    }
    else {
        for (int i = 0; i < duplicates.size(); i++) {
            cout << duplicates[i] << " ";
        }
        cout << endl;
    }
    return 0;
}
