Problem Statement in c++


Thiru is a software engineer who loves to work with data structures. Recently, he has been learning about stacks and wants to implement a stack that not only allows him to push and pop elements but also quickly find the maximum element in the stack.


Write a program that simulates a stack with the following operations:


    Push: Insert an element into the stack.
    Pop: Remove the top element from the stack. If stack is empty, It prints "stack is empty".
    Get Maximum: Find and print the maximum element currently in the stack. If stack is empty, it displays "-1".
    Print Stack: Display all elements currently in the stack. If the stack is empty, it displays the "stack is empty".
    Exit: Terminate the program.

Input format :

The input consists of a single integer. Each integer corresponds to a choice in the menu for interacting with the stack. The choices are as follows:

1: Push an element onto the stack. The next input is the element to push, separated by a space.

2: Pop the top element from the stack.

3: Find and print the maximum element in the stack.

4: Print all elements currently in the stack.

5: Exit the program.
Output format :

The program performs various actions based on the user's choices and prints messages accordingly.


If an element is pushed onto the stack, no specific message is printed.

If an element is popped from the stack, no specific message is printed unless the stack is empty, in which case it prints "Stack is empty."

If the maximum element in the stack is queried, it prints "Maximum element: <max_element>" where <max_element> is the maximum element in the stack. If the stack is empty when querying the maximum, it prints "Maximum element: -1".

If the elements in the stack are printed, they are separated by spaces. If the stack is empty, it prints, "Stack is empty."

If an invalid choice is made, it prints "Invalid choice."


Refer to the sample output for the formatting specifications.
Code constraints :

max_n = 10

1 <= elements <= 100
Sample test cases :
Input 1 :

1 2
1 3
1 5
1 7
1 9
1 10
2 
3
4
5

Output 1 :

Maximum element: 9
2 3 5 7 9 

Input 2 :

1 2
1 4
6
2
2
2
3
4
5

Output 2 :

Invalid choice
Stack is empty
Maximum element: -1
Stack is empty















#include <iostream>
#include <stack>
#include <vector>

using namespace std;

class MaxStack {
private:
    stack<int> mainStack;
    stack<int> maxStack;

public:
    void push(int x) {
        mainStack.push(x);
        if (maxStack.empty() || x >= maxStack.top()) {
            maxStack.push(x);
        }
    }

    void pop() {
        if (!mainStack.empty()) {
            if (mainStack.top() == maxStack.top()) {
                maxStack.pop();
            }
            mainStack.pop();
        } else {
            cout << "Stack is empty" << endl;
        }
    }

    void getMaximum() {
        if (!maxStack.empty()) {
            cout << "Maximum element: " << maxStack.top() << endl;
        } else {
            cout << "Maximum element: -1" << endl;
        }
    }

    void printStack() {
        if (!mainStack.empty()) {
            vector<int> elements;
            while (!mainStack.empty()) {
                elements.push_back(mainStack.top());
                mainStack.pop();
            }

            for (int i = elements.size() - 1; i >= 0; i--) {
                cout << elements[i] << " ";
                mainStack.push(elements[i]);
            }
            cout << endl;
        } else {
            cout << "Stack is empty" << endl;
        }
    }
};

int main() {
    MaxStack stack;
    int choice;
    
    while (true) {
        cin >> choice;
        
        switch (choice) {
            case 1:
                int element;
                cin >> element;
                stack.push(element);
                break;
            case 2:
                stack.pop();
                break;
            case 3:
                stack.getMaximum();
                break;
            case 4:
                stack.printStack();
                break;
            case 5:
                return 0; // Exit the program
            default:
                cout << "Invalid choice" << endl;
        }
    }

    return 0;
}
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

 Single File Programming Question

Problem Statement


Ethan and Alya are working together on a simple stack-based program to search for elements in a fixed-size (30) stack implemented using an array. The program has two main operations: pushing elements onto the stack and searching for elements within the stack. They need to implement these operations efficiently.


Write a program to accomplish the above.


Note: This is a sample question asked during Infosys recruitment.
Input format :

The first line of input consists of an integer 'n', representing the number of elements to be pushed onto the stack.

The next line contains 'n' space-separated integers, each representing an element to be pushed onto the stack.

The next line of input consists of an integer s, representing the element to be searched for in the stack.
Output format :

The output prints one of the following outputs based on the input:


If the stack is full: "STACK is overflow"

If the stack is empty: "The STACK is empty"

If the searched element is found in the stack: "Element found"

If the searched element is not found in the stack: "Element not found"


Refer to the sample outputs for the exact format.
Code constraints :

1 <= n <= 30

-100 <= a[i] <= 100

-100 <= s <= 100
Sample test cases :
Input 1 :

5
1 2 3 4 5
3

Output 1 :

Element found

Input 2 :

5
-1 2 3 4 -5
-6

Output 2 :

Element not found

Input 3 :

0

Output 3 :

The STACK is empty

Input 4 :

31
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31
67

Output 4 :

STACK is overflow
Element not found















#include <iostream>
using namespace std;

const int MAX_SIZE = 30;

class Stack {
private:
    int arr[MAX_SIZE];
    int top;

public:
    Stack() {
        top = -1;
    }

    void push(int value) {
        if (top >= MAX_SIZE - 1) {
            cout << "STACK is overflow" << endl;
        } else {
            arr[++top] = value;
        }
    }

    bool isEmpty() {
        return top == -1;
    }

    bool search(int value) {
        for (int i = 0; i <= top; i++) {
            if (arr[i] == value) {
                return true;
            }
        }
        return false;
    }
};

int main() {
    Stack stack;
    int n, s;

    cin >> n;

    for (int i = 0; i < n; i++) {
        int value;
        cin >> value;
        stack.push(value);
    }

    cin >> s;

    if (stack.isEmpty()) {
        cout << "The STACK is empty" << endl;
    } else if (stack.search(s)) {
        cout << "Element found" << endl;
    } else {
        cout << "Element not found" << endl;
    }

    return 0;
}


000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


 Single File Programming Question

Problem Statement


Mira wants to create a program that allows her to manipulate a stack, perform push and pop operations, and display the elements in the stack. She would like a user-friendly interface that presents a menu with the following options:


    Push Operation: Add an integer to the top of the stack.
    Pop Operation: Remove and discard the integer from the top of the stack.
    Display Stack: Display all the elements currently in the stack, from top to bottom.
    Exit the Program: Terminate the program.


Note: This is a sample question asked in a Capgemini interview.
Input format :

The program expects Ganga to enter a choice (an integer) corresponding to the operation she wants to perform:

1: Push the integer value onto the stack.

2: Pop an integer from the stack.

3: Display the elements currently in the stack.

4: Exit the program.
Output format :

The output displays messages according to the chosen menu option and the status of the stack:


"Stack is empty. Cannot perform a pop operation." when attempting to pop from an empty stack.

"Stack is empty." when the stack is empty.

"Elements in the stack:..." followed by the elements in the stack when choosing option 3.

"Exiting the program." when choosing option 4.

"Invalid choice." when entering an invalid menu choice.


Refer to the sample output for the exact format.
Code constraints :

Choice = 1, 2, 3, 4

0 <= Stack elements <= 50
Sample test cases :
Input 1 :

1
5
1
10
1
25
2
3
4

Output 1 :

Elements in the stack: 10 5 
Exiting the program.

Input 2 :

1
5
3
4

Output 2 :

Elements in the stack: 5 
Exiting the program.

Input 3 :

1
2
1
7
2
2
3
4

Output 3 :

Stack is empty.
Exiting the program.

Input 4 :

1
4
2
2
3
4

Output 4 :

Stack is empty. Cannot perform pop operation.
Stack is empty.
Exiting the program.












#include <iostream>
#include <stack>
using namespace std;

int main() {
    stack<int> stk;
    int choice;

    while (true) {
        cin >> choice;

        switch (choice) {
            case 1: // Push
                int value;
                cin >> value;
                stk.push(value);
                break;
            case 2: // Pop
                if (!stk.empty()) {
                    stk.pop();
                } else {
                    cout << "Stack is empty. Cannot perform pop operation." << endl;
                }
                break;
            case 3: // Display Stack
                if (stk.empty()) {
                    cout << "Stack is empty." << endl;
                } else {
                    cout << "Elements in the stack:";
                    stack<int> tempStk = stk; // Create a temporary stack to preserve the original stack
                    while (!tempStk.empty()) {
                        cout << " " << tempStk.top();
                        tempStk.pop();
                    }
                    cout << endl;
                }
                break;
            case 4: // Exit
                cout << "Exiting the program." << endl;
                return 0;
            default:
                cout << "Invalid choice." << endl;
                break;
        }
    }

    return 0;
}

0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
 Single File Programming Question

Problem Statement


Nayana is given an array of integers and wants to find the Next Greater Element (NGE) for each element in the array. The NGE for an element arr[i] is the first greater element to the right of arr[i] in the array. If there is no greater element to the right, the NGE is considered -1. She needs your help to write a program to find the Next Greater Element (NGE) for each element in an array using a stack-based approach.


Examples:

a) For any array, the rightmost element always has the next greater element as -1.

b) For an array that is sorted in decreasing order, all elements have the next greater element as -1.


Note: This is a sample question asked in Capgemini recruitment.
Input format :

The first line contains an integer n, representing the number of elements in the array.

The next line contains n space-separated integers, representing the elements in the array.
Output format :

The output prints the next greater element for each element in the array.
Code constraints :

1 <= n <= 10

1 <= elements <= 100
Sample test cases :
Input 1 :

4
11 13 21 3

Output 1 :

11 13
13 21
21 -1
3 -1

Input 2 :

4
4 5 2 25

Output 2 :

4 5
5 25
2 25
25 -1

Input 3 :

5
5 4 3 2 1

Output 3 :

5 -1
4 -1
3 -1
2 -1
1 -1

















#include <iostream>
#include <stack>
#include <vector>

using namespace std;

vector<int> findNextGreaterElement(vector<int>& arr) {
    int n = arr.size();
    stack<int> s;
    vector<int> result(n, -1);

    for (int i = 0; i < n; i++) {
        while (!s.empty() && arr[i] > arr[s.top()]) {
            result[s.top()] = arr[i];
            s.pop();
        }
        s.push(i);
    }

    return result;
}

int main() {
    int n;
    cin >> n;
    vector<int> arr(n);

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    // Find the Next Greater Element for each element in the array
    vector<int> result = findNextGreaterElement(arr);

    // Print the result
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " " << result[i] << endl;
    }

    return 0;
}

00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

 Single File Programming Question

Problem Statement


Laddu has implemented a simple stack using an array with a maximum size of MAX_SIZE (defined as 10 in the code). The program provides the following operations:


    Push: Add an integer to the stack.
    Pop: Remove an integer from the top of the stack.
    Check if Stack is Full: Determine if the stack is full.
    Check if Stack is Empty: Determine if the stack is empty.
    Exit: Terminate the program.


Note: This is a sample question asked in a Capgemini interview.
Input format :

If the choice represents the operation to be performed,

1: Push an integer onto the stack.

2: Pop an integer from the stack.

3: Check if the stack is full.

4: Check if the stack is empty.

5: Exit the program.

item, represents the integer to be pushed onto the stack, separated by a space.
Output format :

The output prints one of the following messages:

If the choice is 1 (Push), there is no output.

If the choice is 2 (Pop) and the stack is empty, print "Stack is empty!".

If the choice is 3 (Check if Full), and the stack is full, print "Stack is full!", and if the stack is not full, print "Stack is not full.".

If the choice is 4 (Check if Empty), and the stack is empty, print "Stack is empty!", and if the stack is not empty, print "Stack is not empty."

If the choice is 5 (Exit), the program should terminate immediately.

If the choice is more than 6, It prints "Invalid choice".


Refer to the sample output for the formatting specifications.
Code constraints :

1 <= choice <= 5
Sample test cases :
Input 1 :

1 2
1 6
2
3
4
5

Output 1 :

Stack is not full.
Stack is not empty.

Input 2 :

1 3
1 4
1 5
1 7
1 18
1 19
1 20
1 21
1 34
1 76
4
3
5

Output 2 :

Stack is not empty.
Stack is full!

Input 3 :

1 2
1 4
1 5
1 76
1 89
1 34
1 23
1 65
1 45
1 23
2
2
2
2
2
2
2
2
2
2
4
5

Output 3 :

Stack is empty!

Input 4 :

1 6
1 7
9
5

Output 4 :

Invalid choice

Input 5 :

1 4
2
2
5

Output 5 :

Stack is empty!














#include <iostream>
using namespace std;

const int MAX_SIZE = 10;

class Stack {
private:
    int arr[MAX_SIZE];
    int top;

public:
    Stack() {
        top = -1;
    }

    void push(int value) {
        if (top < MAX_SIZE - 1) {
            arr[++top] = value;
        }
    }

    void pop() {
        if (!isEmpty()) {
            top--;
        }
    }

    bool isFull() {
        return top == MAX_SIZE - 1;
    }

    bool isEmpty() {
        return top == -1;
    }
};

int main() {
    Stack stack;
    int choice, item;

    while (cin >> choice) {
        switch (choice) {
            case 1: // Push
                cin >> item;
                stack.push(item);
                break;
            case 2: // Pop
                if (stack.isEmpty()) {
cout << "Stack is empty!" << endl;
                } else {
                    stack.pop();
                }
                break;
            case 3: // Check if Full
                if (stack.isFull()) {
                    cout << "Stack is full!" << endl;
                } else {
                    cout << "Stack is not full." << endl;
                }
                break;
            case 4: // Check if Empty
                if (stack.isEmpty()) {
                    cout << "Stack is empty!" << endl;
                } else {
                    cout << "Stack is not empty." << endl;
                }
                break;
            case 5: // Exit
                return 0;
            default:
                cout << "Invalid choice" << endl;
                break;
        }
    }

    return 0;
}
