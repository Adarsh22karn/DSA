Question No: 1

Problem Statement



You are working on a data analysis project that involves analyzing a two-dimensional matrix representing data measurements. Each row and column of the matrix corresponds to a specific data point, and the matrix is sorted in ascending order both row-wise and column-wise.



As a part of the data analysis process, you need to implement a function that finds the median value of the data represented by the sorted matrix using binary search.



Write a function findMedian() that takes in the sorted matrix of integers, the number of rows, and the number of columns as inputs. The function should use binary search to find the median value of the data in the matrix.



Assume that the number of elements in the matrix is always odd, so there is a definite median value. The function should return the median value found.



Note: This is a sample question asked in Capgemini recruitment.

Input format :
The first line of input consists of the number of rows m and columns n, separated by space.

The following lines of input consist of m*n elements.

Output format :
The output prints the median value in the given array.

Sample test cases :
Input 1 :
3 3
1 2 3
4 5 6
7 8 9
Output 1 :
5
Input 2 :
5 5
10 11 12 13 15
21 22 26 29 31
32 34 36 38 40
41 42 43 44 45
56 57 58 59 60
Output 2 :
36



#include <iostream>

using namespace std;

int findCount(int** matrix, int n, int target) {
    int count = 0;
    int row = n - 1;
    int col = 0;

    while (row >= 0 && col < n) {
        if (matrix[row][col] <= target) {
            count += row + 1;
            col++;
        } else {
            row--;
        }
    }

    return count;
}

int findMedian(int** matrix, int n) {
    int minVal = matrix[0][0];
    int maxVal = matrix[n - 1][n - 1];

    while (minVal < maxVal) {
        int midVal = minVal + (maxVal - minVal) / 2;
        int count = findCount(matrix, n, midVal);

        if (count <= n * n / 2) {
            minVal = midVal + 1;
        } else {
            maxVal = midVal;
        }
    }

    return minVal;
}

int main() {
    int m, n;
    cin >> m >> n;

    int** matrix = new int*[m];
    for (int i = 0; i < m; ++i) {
        matrix[i] = new int[n];
        for (int j = 0; j < n; ++j) {
            cin >> matrix[i][j];
        }
    }

    cout << findMedian(matrix, m) << endl;

    for (int i = 0; i < m; ++i) {
        delete[] matrix[i];
    }
    delete[] matrix;

    return 0;
}




000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Question No: 2

Problem Statement



You are working on a robotics project that involves a robotic arm with multiple joint angles. Each joint angle is represented by an integer value. The joint angles are stored in an array, which was initially sorted in ascending order. However, due to a system malfunction, the array got rotated, causing the joint angles to become disordered.



As part of the error recovery mechanism, you need to implement a function that finds the minimum joint angle in the sorted and rotated array using binary search.



Write a function findMinimum() that takes in the sorted and rotated array of joint angles and the size of the array as inputs. The function should use binary search to find the minimum joint angle in the array. Assume that the joint angles are represented by integers and there are no duplicate values. The function should return the minimum joint angle found.



Note: This is a sample question asked in Capgemini recruitment.

Input format :
The first line of input consists of the number of elements n.

The second line of input consists of n elements that are sorted and rotated, separated by space.

Output format :
The output prints the minimum value in the array.

Sample test cases :
Input 1 :
10
7 8 9 10 1 2 3 4 5 6
Output 1 :
1
Input 2 :
7
12 14 16 0 2 8 10
Output 2 :
0



// You are using GCC
#include <iostream>

int findMinimum(int arr[], int n) {
    int low = 0;
    int high = n - 1;

    while (low < high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] > arr[high]) {
            low = mid + 1;
        } else {
            high = mid;
        }
    }

    return arr[low];
}

int main() {
    using namespace std;

    int n;
    cin >> n;

    int arr[n];
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int result = findMinimum(arr, n);
    cout << result << endl;

    return 0;
}


00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


Question No: 3

Problem Statement



Given a 2D array of integers, and envelopes, representing the width and height of envelopes, find the maximum number of envelopes that can be nested inside each other, using binary search.



An envelope can only be nested if both its width and height are strictly greater than the width and height of the envelope it is being nested in.



Note: You cannot rotate the envelopes.



Example

Input:

n=4

envelopes = [[5,4],[6,4],[6,7],[2,3]]

Output:

3

Explanation:

The maximum number of envelopes that can be nested inside each other is 3 ([2,3] => [5,4] => [6,7]).



Company Tag: Amazon, Zscaler, BlackRock

Input format :
The first line of input consists of an integer n, representing the number of envelopes.

The next n lines of input consist of two integers wi and hi, representing the width and height of n envelopes.

Output format :
The output prints the maximum number of envelopes that can be nested inside each other.

Code constraints :
1 <= envelopes.length <= 100

envelopes[i].length == 2

Sample test cases :
Input 1 :
3
1 1
1 1
1 1
Output 1 :
1
Input 2 :
4
5 4
6 4
6 7
2 3
Output 2 :
3



#include <iostream>
#include <algorithm>

using namespace std;

bool compare(const pair<int, int>& a, const pair<int, int>& b) {
    if (a.first == b.first) {
        return a.second > b.second;  // Secondary sorting based on height
    }
    return a.first < b.first;  // Primary sorting based on width
}

int maxEnvelopes(pair<int, int>* envelopes, int n) {
    sort(envelopes, envelopes + n, compare);
    
    int dp[n];
    for (int i = 0; i < n; ++i) {
        dp[i] = 1;
    }
    
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < i; ++j) {
            if (envelopes[i].second > envelopes[j].second) {
                dp[i] = max(dp[i], dp[j] + 1);
            }
        }
    }
    
    int maxCount = 0;
    for (int i = 0; i < n; ++i) {
        maxCount = max(maxCount, dp[i]);
    }
    
    return maxCount;
}

int main() {
    int n;
    cin >> n;
    
    pair<int, int>* envelopes = new pair<int, int>[n];
    for (int i = 0; i < n; ++i) {
        cin >> envelopes[i].first >> envelopes[i].second;
    }
    
    cout << maxEnvelopes(envelopes, n) << endl;
    
    delete[] envelopes;
    
    return 0;
}



000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

Question No: 1

Problem Statement



Emily is developing a word processing tool for a publishing company. As part of the tool, she needs to implement a feature that counts the number of words in a given string.



Write a program that prompts the user to enter a string. The program should use linear search to find the count of words in the string. Words in the string are separated by spaces, tabs, or newline characters. The program should then display the count of words.



This feature will greatly assist writers, editors, and content creators in analyzing and managing their text content. It enables them to easily determine the number of words in a document or a specific section of text. Emily's tool empowers users with accurate word count information, facilitating efficient writing and editorial processes.



Note: This is a sample question asked in Capgemini recruitment.

Input format :
The input consists of the sentence.

Output format :
The output prints the count of words in the given string.

Sample test cases :
Input 1 :
Constellations of stars, murals on city walls
Output 1 :
7
Input 2 :
Harry Potter is a famous novel of all time that revolves around the story of a young boy who discovers that he is a wizard.
Output 2 :
25






#include <iostream>
#include <string>
using namespace std;
int main() {


    string inputText;
    //cout << "Enter a string: ";
    getline(cin, inputText);

    int wordCount = 0;
    bool insideWord = false;

    for (char c : inputText) {
        if (c == ' ' || c == '\t' || c == '\n') {
            if (insideWord) {
                insideWord = false;
                wordCount++;
            }
        } else {
            insideWord = true;
        }
    }

    if (insideWord) {
        wordCount++;
    }

    cout <<  wordCount << endl;

    return 0;
}


0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000


Question No: 2

Problem Statement



You are developing a search feature for an online shopping platform. As part of the system, you need to implement a functionality that allows users to check if a specific item is available in the inventory.



Write a program that prompts the user to enter the size of the inventory array and its respective elements. The program should use the linear search algorithm to determine if a target number is present in the array. If the target number is found, the program should display a message indicating its availability. Otherwise, it should display a message indicating that the target number is not available in the inventory.



This feature will assist online shoppers in quickly checking if a specific item is available for purchase. It simplifies the search process and enables users to make informed decisions based on the availability of desired items.



Note: This is a sample question asked in Infosys recruitment.

Input format :
The first line of input consists of the number of elements n in the array.

The second line of input consists of n array elements, separated by space.

The third line of input consists of the target value.

Output format :
The output prints whether the given target value is present in the array or not.



Refer to the sample output for the exact format.

Sample test cases :
Input 1 :
5
6 8 7 4 2
2
Output 1 :
The target value 2 is present in the array.
Input 2 :
5
6 8 7 4 2
1
Output 2 :
The target value 1 is not present in the array.






// You are using GCC
#include <iostream>

using namespace std;

int main() {
    int n;
    //cout << "Enter the number of elements: ";
    cin >> n;

    int inventory[n];
    //cout << "Enter the array elements: ";
    for (int i = 0; i < n; ++i) {
        cin >> inventory[i];
    }

    int target;
    //cout << "Enter the target value: ";
    cin >> target;

    bool found = false;

    for (int i = 0; i < n; ++i) {
        if (inventory[i] == target) {
            found = true;
            break; // Target found, exit the loop
        }
    }

    if (found) {
        cout << "The target value " << target << " is present in the array." << endl;
    } else {
        cout << "The target value " << target << " is not present in the array." << endl;
    }

    return 0;
}


00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000

Question No: 3
Problem Statement:



Dhiya is working on a project that involves building a music playlist generator. The generator takes user preferences and creates a playlist based on those preferences. As part of the playlist generation process, you need to find the appropriate position to insert a new song in an existing sorted playlist array.



Implement the binary search to find the index where the new song should be inserted into the playlist array, maintaining the sorted order (ascending order). If the song with the same duration already exists in the playlist, return its index. If not, return the index where the song should be inserted to maintain the sorted order (ascending order).



Example 1:

Input: 

nums = [1, 3, 5, 6], target = 5

Output: 2



Example 2:

Input: 

nums = [6, 1, 3, 5, 6, 8, 10], target = 12

Output: 6



Example 3:

Input: nums = [1, 3, 5, 6], target = 4

Output: 2



Note: Use the dynamic memory allocation

Input format :
The first line of the input consists of N, representing the size of the music playlist.

The second line of the input contains the N values, which represent the songs separated by spaces.

The last line of the input specifies the index of the song to be printed from the playlist.

Output format :
If the song with the specified duration is already present in the playlist, the output will return the index of that song.

If the song is not found in the playlist, the output will return the index where the song should be inserted to maintain the ascending order of the playlist.



Refer to the sample output for formatting specifications.

Code constraints :
1 <= length of the array <= 500

numbers >= 0

Numbers contain distinct values sorted in ascending order.

target <= 1000 (which song's index to be printed)

Sample test cases :
Input 1 :
4
1 3 5 6
5
Output 1 :
2
Input 2 :
6
1 3 5 6 8 10
12
Output 2 :
6
Input 3 :
4
1 3 5 6
4
Output 3 :
2



// You are using GCC
#include <iostream>

using namespace std;

int binarySearch(int nums[], int size, int target) {
    int left = 0;
    int right = size - 1;

    while (left <= right) {
        int mid = left + (right - left) / 2;

        if (nums[mid] == target) {
            return mid;
        } else if (nums[mid] < target) {
            left = mid + 1;
        } else {
            right = mid - 1;
        }
    }

    return left;
}

int main() {
    int n;
    cin >> n;

    int nums[n];
    for (int i = 0; i < n; i++) {
        cin >> nums[i];
    }

    int target;
    cin >> target;

    int index = binarySearch(nums, n, target);

    cout <<  index << endl;

    return 0;
}

00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000